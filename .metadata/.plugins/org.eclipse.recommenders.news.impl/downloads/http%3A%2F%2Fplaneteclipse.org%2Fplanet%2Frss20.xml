<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Wayne Beaton: Service Releases of Third Party Content in the Eclipse IP Due Diligence Process</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=4752</guid>
	<link>https://waynebeaton.wordpress.com/2017/04/03/service-releases-of-third-party-content-in-the-eclipse-ip-due-diligence-process/</link>
	<description>&lt;p&gt;Some time ago, the Eclipse Foundation’s Board of Directors passed the following resolution.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;RESOLVED&lt;/strong&gt;, that previously approved dependencies of Eclipse projects can be&lt;br /&gt;
reviewed and approved by the EMO as follows:&lt;br /&gt;
a) Service releases (e.g. x.y., bug fixes, security fixes) will require no review.&lt;br /&gt;
b) Minor revisions (e.g. x..) will require a reduced review by the EMO.&lt;br /&gt;
c) Major revisions (e.g. ..) will require a full review by the EMO.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;At the time the resolution was passed, it was decided that project teams would still be required to register the use of service releases for third party content with the Eclipse Intellectual Property (IP) team (i.e. create a &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip-cq&quot;&gt;Contribution Questionnaire&lt;/a&gt;); it was decided that the resolution really only impacted how the IP Team would process the content: at least in theory, the IP Team would &lt;em&gt;rubber stamp&lt;/em&gt; requests for service releases. I say &lt;em&gt;in theory&lt;/em&gt;, because the IP Team would still eyeball these requests and sometimes invest some modest effort to ensure that significant new IP hadn’t been introduced.&lt;/p&gt;
&lt;p&gt;We’ve reconsidered this position.&lt;/p&gt;
&lt;p&gt;Project teams are &lt;em&gt;not required&lt;/em&gt; to engage with the Eclipse IP Team to review service releases for third party content, provided that the service release is based on a previously-approved release. This assumes that the providers of the third party content regard service releases in the manner described by Semantic Versioning (i.e. a patch of backwards-compatible bug fixes) and that the service release does not include significant new IP.  Of course, if a project team isn’t sure, they can always just submit the content for review anyway.&lt;/p&gt;
&lt;p&gt;We envision a scenario where project teams will take advantage of this for milestone builds, but then get full approval for final versions of their third party content. This isn’t required, but it is an option that’s available for project teams that feel that it’s necessary.&lt;/p&gt;
&lt;p&gt;For major and minor releases, the manner in which the the project team interacts with the Eclipse IP Team does not change. Note that it is implied that the &lt;em&gt;reduced review&lt;/em&gt; for minor releases follows an approved full review for a corresponding major release and that any service release follows an approved major or minor release.&lt;/p&gt;
&lt;p&gt;For more information, to add your thoughts and concerns, or to track our progress with regard to updating our documentation, add yourself in copy to &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=512465&quot;&gt;Bug 512465&lt;/a&gt;.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/waynebeaton.wordpress.com/4752/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/waynebeaton.wordpress.com/4752/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=waynebeaton.wordpress.com&amp;amp;blog=19425814&amp;amp;post=4752&amp;amp;subd=waynebeaton&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 03 Apr 2017 20:59:10 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Join the Eclipse Foundation at Devoxx France this Week</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/QLHE8hQxik0/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/QLHE8hQxik0/</link>
	<description>Devoxx France takes place in Paris on April 5-7, 2017. Be sure to register today!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/QLHE8hQxik0&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 03 Apr 2017 15:00:05 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Introducing Eclipse Toolmaker's Day</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/csMRaO1ijvg/workshops</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/csMRaO1ijvg/workshops</link>
	<description>Created for the tools developer community, Eclipse Toolmaker's Day takes place on Wed April 26 2017 in Budapest, Hungary.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/csMRaO1ijvg&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 03 Apr 2017 15:00:00 +0000</pubDate>
</item>
<item>
	<title>Stephan Herrmann: Several Languages Java™ 8</title>
	<guid isPermaLink="false">http://objectteams.wordpress.com/?p=471</guid>
	<link>https://objectteams.wordpress.com/2017/04/02/several-languages-java-8/</link>
	<description>&lt;p&gt;More than 3 years ago, on March 18, 2014, Java™ 8 was released, and &lt;a href=&quot;https://www.eclipsecon.org/na2014/javaday.html&quot; target=&quot;_blank&quot;&gt;on the same day &lt;/a&gt;&lt;a href=&quot;https://www.eclipse.org/community/eclipse_newsletter/2014/january/article1.php&quot; target=&quot;_blank&quot;&gt;Eclipse released support for this new version&lt;/a&gt;. I have &lt;a href=&quot;https://www.eclipsecon.org/na2014/sites/default/files/slides/JDT%20Embraces%20Lambda%20Expressions%20-%20ECNA%202014.pdf&quot; target=&quot;_blank&quot; title=&quot;Slide 41 ff&quot;&gt;repeatedly&lt;/a&gt; made &lt;a href=&quot;https://wiki.eclipse.org/images/1/10/DemoCampMunich_Java8_2014.pdf&quot; target=&quot;_blank&quot; title=&quot;Slide 10&quot;&gt;the point&lt;/a&gt; that the Eclipse compiler for Java (&lt;strong&gt;ecj&lt;/strong&gt;) as a second implementation of &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/&quot; target=&quot;_blank&quot;&gt;JLS&lt;/a&gt; (after javac) serves the entire Java community as a premier means for quality assurance.&lt;/p&gt;
&lt;p&gt;Today, in April 2017, I can report that this effort is still far from complete. Still, JLS, javac and ecj do not define the exact same language. Time to take stock what these differences are about.&lt;/p&gt;
&lt;p&gt;My own work on ecj focuses on an aspect that tries hard to remain invisible to casual users: &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/jls-18.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;type inference&lt;/strong&gt;&lt;/a&gt;. It’s the heavy machinery behind generic methods, diamond expressions and lambdas, allowing users to omit explicit type information in many places, leaving it to the compiler to figure out the fine print.&lt;/p&gt;
&lt;p&gt;To be honest, when we first shipped support for Java 8, I was well expecting lots of bug reports to come in, which would point out corner cases of JLS that we hadn’t implemented correctly. There was one area, that I felt particularly uneasy about: how type inference blends with &lt;strong&gt;overload resolution&lt;/strong&gt;. During the Mars cycle of development Srikanth thankfully performed a major &lt;a href=&quot;https://bugs.eclipse.org/437444&quot; target=&quot;_blank&quot;&gt;rework and clean up&lt;/a&gt; of this exact area.&lt;br /&gt;
(I can’t pass the opportunity to report what I learned from this exercise: &lt;em&gt;&lt;a href=&quot;https://gbracha.blogspot.de/2009/09/systemic-overload.html&quot; target=&quot;_blank&quot;&gt;Overloading&lt;/a&gt; is a huge contributor of complexity in the Java language which in (not only) my opinion doesn’t carry its own weight — not a fraction of it&lt;/em&gt;).&lt;/p&gt;
&lt;h2&gt;We are not done with Java 8&lt;/h2&gt;
&lt;p&gt;The fact that still 2 years after that rework we constantly receive bug reports against Java 8 type inference is unsettling in a way.&lt;/p&gt;
&lt;p&gt;To give some numbers to it: during every 6-week milestone we fixed between 1 and 6 bugs in type inference. None of these bugs is solved in a coffee break, some compete for the title “toughest challenge I faced in my career”.&lt;/p&gt;
&lt;p&gt;We have a total of 103 bugs explicitly marked as 1.8 inference bugs. Of these&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;17 were resolved before Java 8 GA&lt;/li&gt;
&lt;li&gt;52 have been resolved in the three years since Java 8 GA&lt;/li&gt;
&lt;li&gt;34 are still unresolved today.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will likely keep me busy for at least one more year.&lt;/p&gt;
&lt;p&gt;In the early days of Java 8 we could identify two clusters where behavioral differences between javac and ecj could be observed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wildcard capture&lt;/li&gt;
&lt;li&gt;raw types&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(I’ll have a note about the latter at the &lt;a href=&quot;https://objectteams.wordpress.com/category/eclipse/feed/#rawtypes&quot;&gt;end of this post&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In these areas we could comfort ourselves by pointing to &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8016207&quot; target=&quot;_blank&quot;&gt;known&lt;/a&gt; &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8026527&quot; target=&quot;_blank&quot;&gt;bugs&lt;/a&gt; in javac. We even implemented code to conditionally mimic some of these javac bugs, but frankly, establishing bug compatibility is even more difficult than truthfully implementing a specification.&lt;/p&gt;
&lt;p&gt;Meanwhile, in the area of wildcard capture, javac has been significantly improved. Even though some of these fixes appear only in Java 9 early access builds, not in Java 8, we can observe both compilers converging, and given that the major bugs have been fixed, it is getting easier to focus on remaining corner cases. Good.&lt;/p&gt;
&lt;h2&gt;Java “8.1”&lt;/h2&gt;
&lt;p&gt;One event almost went under our radar: In February 2015 a &lt;a href=&quot;http://download.oracle.com/otndocs/jcp/java_se-8-mr-spec/index.html&quot; target=&quot;_blank&quot;&gt;revised version of JLS 8 &lt;/a&gt;was published. As part of this update, a few sentences have been added on behalf of &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8038747&quot; target=&quot;_blank&quot;&gt;JDK-8038747&lt;/a&gt;. While the spec may be hard to grok by outsiders, the goal can be explained as enabling a compiler to include more type hints from the bodies of lambda expressions that are nested inside a generic method invocation.&lt;/p&gt;
&lt;p&gt;In fact, collecting type information from different levels in the AST was a big goal of the type inference rewrite in Java 8, but without the 2015 spec update, compilers weren’t even allowed to look into the body of a lambda, if the lambda does not specify types for its arguments.&lt;/p&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;code&quot; style=&quot;border-collapse: collapse;&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;otj&quot; style=&quot;font-family: monospace; text-align: center;&quot;&gt;m(a -&amp;gt; a.b())&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; font-family: sans-serif;&quot;&gt;What do we know about b, while types for m and a are still unknown?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Conceptually, this is immensely tricky, because generally speaking, the code in the bodies of such type-elided lambdas can mean just about anything, while the signature of the lambda is not yet known. So we were happy about the spec update, as it promised to resolve a bunch of test cases, where javac accepts programs that ecj – without the update – was not able to resolve.&lt;/p&gt;
&lt;p&gt;Ever since, each improved version of ecj created a &lt;strong&gt;regression&lt;/strong&gt; for one or more of our dear users. We debugged no end, read between the lines of JLS, but couldn’t find a solution that would satisfy users in all cases. And they kept complaining that javac had no problems with their programs, even earlier versions of ecj accepted their program, so rejecting it now must be a regression.&lt;/p&gt;
&lt;h2&gt;“Switching the alliance”&lt;/h2&gt;
&lt;p&gt;Up-to that point, I saw our main ally in the authors of JLS, Dan Smith and Alex Buckley from Oracle. In particular Dan Smith has been a tremendous help in understanding JLS 8 and analyzing where our reading of it deviated from the authors’ intention. Together we identified not only bugs in my interpretation and implementation of JLS, but also several bugs in javac.&lt;/p&gt;
&lt;p&gt;When we iterated bugs relating to JDK-8038747 time and again, this approach was less effective, coming to no conclusion in several cases. I slowly realized, that we were reaching a level of detail that’s actually easier to figure out when working with an implementation, than at the specification level.&lt;/p&gt;
&lt;p&gt;This is when I started to seek advice from javac developers. Again, I received very valuable help, now mostly from Maurizio Cimadamore. Previously, my perception was, that JLS is the gold standard, and any deviation or even just liberal interpretation of it is bad. During the discussion with Maurizio I learned, that in some sense javac is actually “better” than JLS, not only in accepting more type-correct programs, but also in terms of better reflecting the intention of the JSR 335 experts.&lt;/p&gt;
&lt;p&gt;So I started to deliberately deviate from JLS, too. Instead of “blaming” javac for deviating from JLS, I now “blame” JLS for being incomplete wrt the intended semantics.&lt;/p&gt;
&lt;p&gt;To put this effort into proportion, please consider the figure of 103 bugs mentioned above. From these, 17 bugs have a reference to JDK-8038747. Coincidentally, this is the exact same number as those great bug reports prior to Java 8 GA, that gave us the huge boost, enabling us to indeed deliver a high quality implementation right on GA. In other words, this is a huge engineering effort, and we have no idea, how close to done we are. Will we face the next round of regressions on every new release we publish?&lt;/p&gt;
&lt;p&gt;If you work from a specification, there is a point where you feel confident that you did all that is required. Knowing that fulfilling the spec is not enough, it’s impossible to say, what &lt;em&gt;is&lt;/em&gt; “enough”.&lt;/p&gt;
&lt;h2&gt;What is “better”?&lt;/h2&gt;
&lt;p&gt;With wildcard captures and raw types, it was easy to argue, that certain programs &lt;em&gt;must&lt;/em&gt; be rejected by a compiler, because they are not type safe and can blow up at runtime in unexpected locations. In the area around JDK-8038747 javac tends to accept more programs than JLS, but here it would be unreasonable to expect javac to change and start rejecting these “good” programs.&lt;/p&gt;
&lt;p&gt;Still, calling out a competition of who accepts more “good” programs would be a bad idea, too, because this would completely abandon the goal of equivalence between compilers. After compiling with one compiler, one could never be sure that another compiler would also accept the same program. The term “Java” would loose its precise meaning.&lt;/p&gt;
&lt;p&gt;This implies, every attempt to better align ecj with javac, based on knowledge about the implementation and not based on JLS, should be seen as a temporary workaround. To resume its role of leadership, JLS must catch up with any improvements done in the implementation(s).&lt;/p&gt;
&lt;p&gt;To comfort the reader, I should say that in all cases discussed here, there’s always a safe fallback: when inference fails to find a solution, it is always possibly to help the compiler by adding some explicit type arguments (or argument types for a lambda). More importantly, such additions, which may be required for one compiler, should never cause problems for another compiler.&lt;/p&gt;
&lt;p&gt;Also note, that explicit type arguments are always to be preferred over type casts (which some people tend to use as a workaround): type arguments will help for effective type checking, whereas type casts &lt;em&gt;bypass&lt;/em&gt; type checking and can blow up at runtime.&lt;/p&gt;
&lt;h2&gt;Thanks and Sorry!&lt;/h2&gt;
&lt;p&gt;I wrote this post in the desire to reach out to our users.&lt;/p&gt;
&lt;p&gt;First: Each reproducible bug report is highly valuable; this is what drives JDT code towards higher and higher quality. By accumulating test cases from all these reports we gradually create a test suite that provides the best available safety net.&lt;/p&gt;
&lt;p&gt;Second: I am sorry about every regression introduced by any of our fixes, but as this post should explain, we are traveling uncharted territory: some of the corner cases we are currently addressing are not sufficiently covered by JLS. Additionally, type inference is inherently sensitive to the slightest of changes. Predicting, which programs will be affected by a given change in the implementation of type inference is near impossible.&lt;/p&gt;
&lt;p&gt;Yet, it’s certainly not a game of “them” vs “us”: JLS, javac, and ecj, we’re all in this together, and only by continuing to talk to each other, eventually we will all speak the same language, when we say “Java 8”. Please bear with us as the saga continues …&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;rawtypes&quot;&gt;PS: Another pet peeve&lt;/h2&gt;
&lt;p&gt;I am a type system enthusiast, mostly, because I like how type checkers can completely &lt;a href=&quot;https://www.eclipsecon.org/na2014/sites/default/files/slides/JDTEmbracesTypeAnnotations.pdf&quot; target=&quot;_blank&quot;&gt;eliminate entire categories of bugs&lt;/a&gt; from your programs. I like to give a guarantee that no code that is accepted by the compiler will ever fail at runtime with an exception like attempting to invoke a method that is not present on the receiver, or class cast exceptions in source code that doesn’t mention any class cast. Type inference is the tool that alleviates the verbosity of explicitly typed programs, while at the same time maintaining the same guarantees about type safety.&lt;/p&gt;
&lt;p&gt;Unfortunately, there is a class of Java programs for which such guarantees can not be given: if a program uses raw types, the compiler needs to generate lots of checkcast instructions, to make the code acceptable for the JVM. Each of these instructions can cause the program to blow up at runtime in totally unsuspicious locations.&lt;/p&gt;
&lt;p&gt;There are situations where javac silently assumes that a raw type List is a subtype of its parameterized form List&amp;lt;String&amp;gt;. This is wrong. Still I cannot just ignore this problem, because lots of “bugs” are reported against ecj, based on the observation that javac and ecj accept different programs, where in many cases the difference concerns the handling of raw types during type inference.&lt;/p&gt;
&lt;p&gt;Economically speaking, investigating in the subtleties of how Java 8 compilers handle raw types is a huge waste of efforts. Any one reading this: if you want to do me a favor, and thus help me to focus on the most relevant aspects of compiler development, please clean up your code. If you keep your code private, nobody will suffer except from yourself, but please, before posting a bug report against JDT, if your code example contains raw types, think thrice before submitting the report. Adding proper type arguments will certainly improve the quality of your code. Likely, after that exercise also ecj will be a lot happier with your code and give you correct answers.&lt;/p&gt;
&lt;p&gt;Do I need to repeat that raw types were a workaround for migrating towards Java 5? … that raw types were discouraged starting from day 1 of Java 5? If that doesn’t convince you, search on StackOverflow for questions mentioning raw types and type inference, and you will see that by the use of raw types you are basically disabling much of the power of type inference. Let’s &lt;em&gt;please&lt;/em&gt; shed the legacy of raw types.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/objectteams.wordpress.com/471/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/objectteams.wordpress.com/471/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=objectteams.wordpress.com&amp;amp;blog=52525906&amp;amp;post=471&amp;amp;subd=objectteams&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 02 Apr 2017 19:43:26 +0000</pubDate>
</item>
<item>
	<title>Melanie Bats: Back to the Future: Eclipse Converge &amp; Devoxx US</title>
	<guid isPermaLink="false">http://melb.enix.org/?p=436</guid>
	<link>http://melb.enix.org/general/back-to-the-future-eclipse-converge-devoxx-us/</link>
	<description>&lt;p&gt;Last week, &lt;a href=&quot;https://www.obeo.fr/en/&quot;&gt;Obeo&lt;/a&gt; sent me to San Jose, California to attend the 1st &lt;a href=&quot;https://www.eclipseconverge.org/na2017/&quot;&gt;Eclipse Converge&lt;/a&gt; and &lt;a href=&quot;https://devoxx.us/&quot;&gt;Devoxx US&lt;/a&gt; which was really cool of them. It makes sense to co-locate those events as both involved Java developers and open source projects. I really believe that these communities have so many things to share that this week in California would be a great occasion to learn from each other.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Back to the Future&quot; class=&quot;aligncenter&quot; src=&quot;https://github.com/mbats/mbats.github.io/blob/master/img/devoxxus/back_to_the_future.jpg?raw=true&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;eclipse-converge&quot;&gt;Eclipse Converge&lt;/h2&gt;
&lt;p&gt;I started my week by attending &lt;a href=&quot;https://www.eclipseconverge.org/na2017/&quot;&gt;Eclipse Converge&lt;/a&gt;, a one-day event dedicated to the Eclipse community and co-located with the IoT day.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Eclipse Converge &amp;amp; IoT day&quot; class=&quot;aligncenter&quot; src=&quot;https://github.com/mbats/mbats.github.io/blob/master/img/devoxxus/eclipse_converge_iot_day.jpg?raw=true&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The number of Eclipse committers present was amazing, which was particularly noticeable thanks to the Eclipse committer swag, a cool purple hoodie!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Eclipse Committer Hoodie&quot; class=&quot;aligncenter&quot; src=&quot;https://github.com/mbats/mbats.github.io/blob/master/img/devoxxus/eclipse_hoodie.jpg?raw=true&quot; /&gt;&lt;/p&gt;
&lt;p&gt;One thing I noticed is that this year for the first time, they have it in women sizes! This is one of those little things which helps our community to become more diverse! Thanks Eclipse Foundation, I love it so much!&lt;/p&gt;
&lt;p&gt;As all Eclipse events, it was a great moment of social networking, attending high quality talks, meeting the usual suspects and getting the chance to exchange with american Eclipse community members.&lt;/p&gt;
&lt;h2 id=&quot;devoxx-us&quot;&gt;Devoxx US&lt;/h2&gt;
&lt;p&gt;The day after, &lt;a href=&quot;https://devoxx.us/&quot;&gt;Devoxx US&lt;/a&gt; started! It was a new chance for me to meet this extended community, as this was my first Devoxx ever and no doubt Devoxx is a great event. Thanks to the Eclipse Foundation for having gathered 700 attendees from 31 countries in the same place during 3 days. One of the important thing about Devoxx is that it is a vendor neutral event: not everything is related to Eclipse or a specific IDE, there’s a much wider diversity of content. Thanks to this, I’ve been able to attend many different demos based on different IDEs. This allowed me to notice some interesting differences:&lt;/p&gt;
&lt;p&gt;I loved the clean UI of VSCode,&lt;/p&gt;
&lt;p&gt;I appreciated the templates and the zoom in IntelliJ that allow fluent live coding demos,&lt;/p&gt;
&lt;p&gt;I was impressed by the &lt;a href=&quot;https://www.eclipseconverge.org/na2017/session/how-provide-portable-developer-workspace-eclipse-che&quot;&gt;talk by Stevan Lemeur and Florent Benoit&lt;/a&gt; and the easy setup of Eclipse Che thanks to CheFile and Factories! From just clicking on an hyperlink, it will provide you a complete IDE in your browser with all the tools, projects and source code you need. This opens a really cool possibility for open source projects who want to ease the effort to start contributing.&lt;/p&gt;
&lt;p&gt;I discovered the new stuff that will be relased in June with the next Eclipse Oxygen version. Wayne Beaton from the Eclipse Foundation and Gunnar Wagenknecht from SalesForce did an interesting &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/RNK-9521/Developing_Java_Applications_with_the_Eclipse_IDE,_Neon_Edition&quot;&gt;talk&lt;/a&gt; about all these useful projects existing or arriving: Code recommenders, ECLEmma, Graphviz editor, Improved UX with a better use of screen space (margins reduced, default styling…), support of Java9 and JUnit5, and a new Generic Editor becoming particularly useful combined with the Language Server Protocol.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Eclipse Oxygen&quot; class=&quot;aligncenter&quot; src=&quot;https://github.com/mbats/mbats.github.io/blob/master/img/devoxxus/eclipse_oxygen.jpg?raw=true&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;language-server-protocol&quot;&gt;Language Server Protocol&lt;/h2&gt;
&lt;p&gt;Until I heard about LSP, I did not realize how complex it is for language developers to get a good support and tooling of their language in all those different IDEs. A really clear introduction to LSP was given by Sven Efftinge from TypeFox who explained the origin, the status and the potential of LSP for the Eclipse community.&lt;img alt=&quot;Language Server Protocol Explained&quot; class=&quot;aligncenter&quot; src=&quot;https://github.com/mbats/mbats.github.io/blob/master/img/devoxxus/lsp.jpg?raw=true&quot; /&gt;Thanks to this talk, I now understand better the power of the LSP. Open sourced by Microsoft for VS Code, the Language Server Protocol is the new trend for language editors. In a few months, Microsoft, Red Hat, Codenvy and many others started collaborating to implement it for VS Code, Eclipse, Eclipse Che, Emacs and even Gnome builder! Only open source can create this kind of synergy and cooperation. In Eclipse, it results in three new projects that will be released with the next Eclipse Oxygen :&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://projects.eclipse.org/proposals/eclipse-lsp4e&quot;&gt;LSP4E&lt;/a&gt;: provides integration of language servers conforming to the Language Server Protocol into the Eclipse IDE.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://projects.eclipse.org/proposals/eclipse-lsp4j&quot;&gt;LSP4J&lt;/a&gt;: provides a reusable Java implementation of LSP. It implements the types as well as the communication, including serialization to and deserialization from JSON.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=497871&quot;&gt;Generic editor&lt;/a&gt;: supports easily new languages. For the next release, LSP will allow to get the same level of support for JS in Eclipse and VS Code. But even more when like me you are working on Domain Specific Language, this could be really powerful: imagine you’re developing your own DSL and you easily get support for it in all the editors. This is possible now thanks to Xtext Core. This is only the beginning, there are some remaining issues to solve around extensibility, creating a market place, supporting debug features… At the moment the LSP is dedicated to textual editors, I expect that one day it can be extended to graphical editors too!&lt;/p&gt;
&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons Learned&lt;/h2&gt;
&lt;p&gt;Open source allows to gather skilled people from different companies to develop together around a common goal. A conference like Devoxx allows you to advance your personal knowledge and to become an innovation agent in your own company. The organizers define it as a “Conference for developers by developers”. I attended many talks that highlighted how important it is in our domain to learn from our peers. &lt;a href=&quot;https://medium.com/@markog&quot;&gt;Marko Gargenta&lt;/a&gt; in his talk about &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/JVD-8929/Peer_Learning&quot;&gt;Peer Learning&lt;/a&gt; narrated his experience at Twitter and explained that there are different ways to share knowledge, classically by organizing techie classes but not only. One of the interesting things I remember from his talk is the need to share knowledge about technical aspects, but also about the company culture, for example by recounting what he named &lt;em&gt;War Stories&lt;/em&gt;. Ryan Sonnenberg talked about what they did to disseminate the knowledge at Uber while they scale. From his point of view, best practices shared by code reviews do not scale as an individual reviewing code cannot disseminate knowledge fast enough. The main point for him is to hook into the build system in order to enforce patterns and so eliminate the repetitive work and cumbersome manual processes: use static analysis, &lt;a href=&quot;http://findbugs.sourceforge.net/&quot;&gt;FindBugs&lt;/a&gt;, &lt;a href=&quot;http://fbinfer.com/docs/eradicate.html&quot;&gt;Infer:Eradicate&lt;/a&gt;, &lt;a href=&quot;https://github.com/typetools/checker-framework.demos/tree/master/presentations/2017-DevoxxUS&quot;&gt;checker framework&lt;/a&gt;… I attended three other good talks sharing best practices from the battlefield:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/StevePoole/ten-simple-rules-for-writing-great-testcases-devoxx-us&quot;&gt;Ten simple rules for writing great test cases&lt;/a&gt; by Stuart Marks &amp;amp; Steve Poole: Rules to maximize your effort &amp;amp; protect investment in tests&lt;img alt=&quot;Ten simple rules for writing great testcases&quot; class=&quot;aligncenter&quot; src=&quot;https://github.com/mbats/mbats.github.io/blob/master/img/devoxxus/ten_simple_rule_for_wrinting_testcases.jpg?raw=true&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://haughtcodeworks.com/blog/software-development/prototyping-mindset/&quot;&gt;Prototyping mindset&lt;/a&gt; by Marty Haught: Invoke YAGNI whenever it makes sense and reduce the complexity of your solution!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.eclipsecon.org/europe2016/content/testing-eclipse-plug-ins-lessons-field&quot;&gt;Test Lessons from the field&lt;/a&gt; and &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/RQL-8052/Effective_Unit_Testing&quot;&gt;Effective Unit Testing&lt;/a&gt; by Elliotte Rusty Harold, Simple and easy to follow advices for every day that could be summarized by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Separate your Eclipse/Non Eclipse code, your GUI/Non GUI projects,&lt;/li&gt;
&lt;li&gt;Test also your configuration files (plugin.xml, MANIFEST.MF, plugin.properties…),&lt;/li&gt;
&lt;li&gt;One of the most obvious advice but definitely worth to be heard when you found a bug first write a test and then fix the bug.&lt;/li&gt;
&lt;li&gt;And finally use Continuous Integration and code coverage tools like Cobertura or Jacoco.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;build&quot;&gt;Build&lt;/h2&gt;
&lt;p&gt;Build was also the topic of several excellent talks. I always use Maven just from habit and not really because I love it. That’s the case for most of us, we use it and hate it. Andy Gumbrecht proposed an intriguing ignite session by declaring &lt;a href=&quot;http://www.tomitribe.com/blog/2016/06/i-do-not-hate-apache-maven/&quot;&gt;I do not hate Maven&lt;/a&gt;. He explained that it is not useful to fight against Maven, when you have to do something with it just do it the Maven way. For him your pom hygiene is the key, it should read like a book, keep it clean and tidy. Manage your environment at the highest possible level in your top parent and invest in global properties to control it. Manage versions and not scopes. Groovy gives the ability to do anything at any stage of the build, so use it. And when you have a Maven issue, just remember that Google is your friend!&lt;/p&gt;
&lt;p&gt;I took the time to explore what other build systems can offer. An excellent tools in action was proposed by Baruch Sadogursky &amp;amp; Oleg Šelajev about &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/XFT-7496/Maven_v_Gradle:_Dawn_of_Project_Automation&quot;&gt;Maven vs Gradle&lt;/a&gt;, it was mostly a demo comparing the tools on the same project. At the end, my impression was that both provide the same features, it is more a matter of taste: Maven due to XML is very verbose and Gradle feels more readable/maintainable. For the ones using Eclipse like me, using the &lt;a href=&quot;https://www.eclipse.org/m2e/&quot;&gt;M2E&lt;/a&gt; plugin can help, for Gradle lovers, a thorough &lt;a href=&quot;https://github.com/diffplug/gradle-and-eclipse-rcp&quot;&gt;overview of the Gradle tooling available in Eclipse&lt;/a&gt; was done by Ned Twigg. To go further, and for whom performance matters, Ryan Sonnenberg during his session &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/SSI-8355/Building_at_Uber_scale&quot;&gt;Building at Uber scale&lt;/a&gt; talked about &lt;a href=&quot;https://github.com/uber/okbuck&quot;&gt;OkBuck&lt;/a&gt;, a plugin to use &lt;a href=&quot;https://buckbuild.com/&quot;&gt;Buck&lt;/a&gt; build system on Gradle project.&lt;/p&gt;
&lt;h2 id=&quot;jdk8&quot;&gt;JDK8&lt;/h2&gt;
&lt;p&gt;I took time also to inspect some classical APIs. My first astonishment is that : Yes it is possible to do a 1h talk only about &lt;a href=&quot;https://stuartmarks.files.wordpress.com/2017/03/optionalmotherofallbikesheds-devoxxbe2016.pdf&quot;&gt;Optional&lt;/a&gt;! Stuart Marks did it and it was pretty interesting. Going through examples, he declaimed the following seven rules which for sure have to be pinned to my wall :&lt;img alt=&quot;Optional - The Mother of all Bikesheds&quot; class=&quot;aligncenter&quot; src=&quot;https://github.com/mbats/mbats.github.io/blob/master/img/devoxxus/ten_simple_rule_for_wrinting_testcases.jpg?raw=true&quot; /&gt;One more talk I found useful is the one about &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/PEV-2089/Collections.compare(JDK,_Eclipse,_Guava,_Apache...)&quot;&gt;comparing the different Java Collections libraries&lt;/a&gt;. You know this doubt you have sometimes: should I use Java Collections? Guava? Eclipse Collections? Which one would be the most effective in my situation? The following summary can help you take a decision:&lt;img alt=&quot;Collections.compare&quot; class=&quot;aligncenter&quot; src=&quot;https://github.com/mbats/mbats.github.io/blob/master/img/devoxxus/collections_compare.jpg?raw=true&quot; /&gt;Stuart Marks again demonstrated the new features of collections in Java 8, as well as what’s coming in Java 9: &lt;a href=&quot;https://www.youtube.com/watch?v=LgR9ByD1dEw&quot;&gt;Collections Refueled&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;jdk9&quot;&gt;JDK9&lt;/h2&gt;
&lt;p&gt;As you guess, one of the hot topic during Devoxx was the new Java 9! Definitely, the next stop for the Java developers will be the upcoming release of the JDK9, on July, 27th. Notice that finally Oracle adjusted the versioning scheme: they will no longer be named 1.x! There were lots of Oracle talks about Jigsaw, the new modular way of coding. In fact, this is not that exciting, even more when you are working in the OSGI world as I do since many years now. For most Java developers, this seems mostly like something which looks painful as it might break everything. Trisha Gee did a great talk &lt;a href=&quot;https://www.youtube.com/watch?v=96vce1qd0QY&quot;&gt;Anticipating Java 9 functionnality &amp;amp; tooling&lt;/a&gt; presenting what we could expect more from Java 9 and demonstrates how IntelliJ already support it. Worth mentioning that Eclipse also already has support for JDK 9 thanks to the great work done by the IBM JDT team. They announced a special Eclipse update available at the end of July to support it the day of the JDK9 official release. So what are those little and big things I await for Java9 ?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Better everything: memory, performance, doc, faster compilation…&lt;/li&gt;
&lt;li&gt;New methods on stream API: takeWhile/DropWhile, List.of/Set.of/Map.of/Map.ofEntries&lt;/li&gt;
&lt;li&gt;HTML5 Javadoc&lt;/li&gt;
&lt;li&gt;Javadoc search&lt;/li&gt;
&lt;li&gt;Private static methods available in interface&lt;/li&gt;
&lt;li&gt;@Deprecated(since, forRemoval)&lt;/li&gt;
&lt;li&gt;New process API&lt;/li&gt;
&lt;li&gt;Java9 REPL: JShell&lt;/li&gt;
&lt;li&gt;Flow API which means that reactive programming is an important programming paradigm now and is really here to stay. You do not know yet what it means? Have a look at the good introduction by Venkat Subramaniam about &lt;a href=&quot;https://www.youtube.com/watch?v=weWSYIUdX6c&quot;&gt;Reactive Programming in Java&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;modern-web&quot;&gt;Modern web&lt;/h2&gt;
&lt;p&gt;I am not a web developer but I attended few interesting talks about modern web development as well, my top 3:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=VT4xsDCeDxE&quot;&gt;Binge streaming your web API&lt;/a&gt; by Audrey Neveu &amp;amp; Guillaume Laforge where I discovered the principle of Server-Sent Events and a great use of JSON patch.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/yfain/angular-4-for-java-developers&quot;&gt;Angular2 for Java dev&lt;/a&gt; by Yakov Fain which demystifies the Angular framework.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://cfp.devoxx.us/2017/talk/NWB-0408/Is_Your_JavaScript_Ready_for_the_Enterprise%3F_What_Does_That_Even_Mean%3F&quot;&gt;Is your JavaScript ready for enterprise ?&lt;/a&gt; by John Brock who tought me to resist to the hype, to rediscover HTML5 and to choose between all the JS frameworks and libraries options.&lt;/p&gt;
&lt;h2 id=&quot;homeworks&quot;&gt;Homeworks&lt;/h2&gt;
&lt;p&gt;As usual coming back from a conference, I still have some homework to do now, I will just share what will be the next stops for me, I should have a look at:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/szczepiq/mockito-devoxx-2017&quot;&gt;Mockito 2&lt;/a&gt; : I have to re-try this popular mock framework which can be used in conjunction with JUnit to write even cleaner tests.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/christophd/citrus-demo-devoxx-us&quot;&gt;Cucumber &amp;amp; Citrus&lt;/a&gt; : was not able to attend this one, I am waiting for the video.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://cfp.devoxx.us/2017/talk/ZCD-4979/JUnit_5_-_The_New_Testing_Framework_for_Java_and_Platform_for_the_JVM&quot;&gt;JUnit5&lt;/a&gt; : one of the best news of this week, a complete redesign of the JUnit framework, that will arrive soon and well &lt;a href=&quot;https://www.eclipseconverge.org/na2017/sites/default/files/slides/Embracing%20JUnit%205%20with%20Eclipse.pdf&quot;&gt;integrated in Eclipse&lt;/a&gt; for the Oxygen.1 release for this fall.&lt;/p&gt;
&lt;h2 id=&quot;open-your-mind&quot;&gt;Open your mind&lt;/h2&gt;
&lt;p&gt;To conclude, DevoxxUS was really impressive in terms of technical contents. There were also lots of fun and unexpected sessions. I laughed out loud during the session about &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/OTY-5246/The_Business_of_Technology_Business_Technology&quot;&gt;the Business of Technology Business Technology&lt;/a&gt; by Chet Haase and the &lt;a href=&quot;http://javaposse.com/&quot;&gt;Java Posse&lt;/a&gt; live podcast and moreover I learned diverse things like &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/YOX-8173/Developer's_guide_to_HomeBrewing..._&quot;&gt;home brewering&lt;/a&gt; or &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/FEI-0558/How_NOT_to_restore_a_VW_Bus&quot;&gt;how to not restore a VW bus&lt;/a&gt;. Finally, I opened my mind to new horizons with great sessions about experiments around &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/NHF-2672/Personality_Is_the_New_Ringtone:_Experiments_in_AI_design&quot;&gt;AI design&lt;/a&gt;, &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/OHB-4306/Deep_learning_in_biomedicine:_challenges_and_opportunities&quot;&gt;deep learning&lt;/a&gt;, &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/VUB-9615/New_Computer_Architectures_:_Explore_Quantum_Computers_&amp;amp;_SyNAPSE_neuromorphic_chips&quot;&gt;quantum computing&lt;/a&gt;! No doubt now I have to attend the other Devoxx in France, in Belgium and in US again. If you have the chance to attend &lt;a href=&quot;https://www.devoxx.fr/&quot;&gt;Devoxx France&lt;/a&gt; next week, come by to say ‘Hi’ to the Obeo guys at the &lt;a href=&quot;https://www.devoxx.fr/assets/images/plan_stands.jpg&quot;&gt;Eclipse Foundation booth 26&lt;/a&gt;. See you there in the future!&lt;img alt=&quot;Where we're going we don't need roads&quot; class=&quot;aligncenter&quot; src=&quot;https://github.com/mbats/mbats.github.io/blob/master/img/devoxxus/roads.jpg?raw=true&quot; /&gt;&lt;/p&gt;</description>
	<pubDate>Fri, 31 Mar 2017 12:15:50 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: An academic perspective on software product lines webinar</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=595</guid>
	<link>https://papyrusuml.wordpress.com/2017/03/29/an-academic-perspective-on-software-product-lines-webinar/</link>
	<description>&lt;p&gt;On Friday, March 31&lt;sup&gt;th&lt;/sup&gt; at 16:00 CET, 15:00 GMT, and 11:00 EDT, the Papyrus Industry Consortium’s (Me-IC!) Research and Academia (“&lt;em&gt;PIC-RAC&lt;/em&gt;“) committee will host their fourth &lt;a href=&quot;https://wiki.polarsys.org/Papyrus_IC/Research_Academia/Webinars#Upcoming_webinars&quot; target=&quot;_blank&quot;&gt;webinar&lt;/a&gt; of the year.&lt;/p&gt;
&lt;p&gt;The topic is on an &lt;a href=&quot;https://wiki.polarsys.org/Papyrus_IC/Research_Academia/Webinars#.22Software_Product_Lines_and_Variability_Modelling.22_--_Academia_perspective&quot; target=&quot;_blank&quot;&gt;academic perspective on software product lines&lt;/a&gt; with speakers from Østfold University College, University of Passau, and TU Braunschweig.&lt;/p&gt;
&lt;p&gt;See this &lt;a href=&quot;https://wiki.polarsys.org/Papyrus_IC/Research_Academia/Webinars&quot;&gt;link&lt;/a&gt; for the connection information.&lt;/p&gt;&lt;br /&gt;Filed under: &lt;a href=&quot;https://papyrusuml.wordpress.com/category/papyrus-ic/&quot;&gt;Papyrus IC&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/papyrus-ic/research-and-academia/&quot;&gt;Research and Academia&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/webinar/&quot;&gt;webinar&lt;/a&gt; Tagged: &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/academia/&quot;&gt;academia&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/product-line/&quot;&gt;product-line&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/webinar/&quot;&gt;webinar&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/papyrusuml.wordpress.com/595/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/papyrusuml.wordpress.com/595/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/papyrusuml.wordpress.com/595/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/papyrusuml.wordpress.com/595/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/papyrusuml.wordpress.com/595/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/facebook/papyrusuml.wordpress.com/595/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/papyrusuml.wordpress.com/595/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/twitter/papyrusuml.wordpress.com/595/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/papyrusuml.wordpress.com/595/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/papyrusuml.wordpress.com/595/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/papyrusuml.wordpress.com/595/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/papyrusuml.wordpress.com/595/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/papyrusuml.wordpress.com/595/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/papyrusuml.wordpress.com/595/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=papyrusuml.wordpress.com&amp;amp;blog=72365150&amp;amp;post=595&amp;amp;subd=papyrusuml&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 29 Mar 2017 14:37:04 +0000</pubDate>
</item>
<item>
	<title>Roxanne Joncas: 4 New IoT Articles — Eclipse Newsletter</title>
	<guid isPermaLink="false">https://medium.com/p/9bbfb12b898e</guid>
	<link>https://medium.com/@roxanne.iot/4-new-iot-articles-eclipse-newsletter-9bbfb12b898e?source=rss-82f8afd3e513------2</link>
	<description>&lt;p&gt;Each month, I work with various technical experts to create and publish a new issue of the &lt;a href=&quot;https://www.eclipse.org/community/eclipse_newsletter/2017/march/&quot;&gt;&lt;strong&gt;Eclipse Newsletter&lt;/strong&gt;&lt;/a&gt;. The theme changes every month; this month it was Eclipse IoT! The articles feature four great IoT projects: Eclipse Hono, Eclipse ioFog, Eclipse Kapua, and Eclipse Vorto. Thank you to the authors for taking the time to write this content.&lt;/p&gt;&lt;figure&gt;&lt;a href=&quot;https://www.eclipse.org/community/eclipse_newsletter/2017/march/&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*c2B4w_J0qOWQ0nECFDVR2g.png&quot; /&gt;&lt;/a&gt;Eclipse Newsletter — Internet of all the Things&lt;/figure&gt;&lt;p&gt;&lt;a href=&quot;http://iot.eclipse.org/&quot;&gt;&lt;strong&gt;Eclipse IoT&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt;is growing quickly and becoming an influential open source IoT community. We now have over 30 members and over 25 projects. Just last month, a new Eclipse IoT project called &lt;a href=&quot;https://projects.eclipse.org/proposals/eclipse-ditto&quot;&gt;&lt;strong&gt;Eclipse Ditto&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt;was proposed. If you’re interested in the Internet of Things, you should definitely look at the open source projects our community offers.&lt;/p&gt;&lt;p&gt;Now I’ll stop typing and let you read the IoT themed &lt;a href=&quot;https://www.eclipse.org/community/eclipse_newsletter/2017/march/&quot;&gt;&lt;strong&gt;Eclipse Newsletter&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Enjoy!&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=9bbfb12b898e&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 29 Mar 2017 11:54:19 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Provide Your Feedback | Eclipse Foundation Survey</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/jzDZ5BJi-AM/20170329_eclipsesurvey2017.php</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/jzDZ5BJi-AM/20170329_eclipsesurvey2017.php</link>
	<description>Provide your opinion on open source and the Eclipse Foundation. Take our survey today!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/jzDZ5BJi-AM&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 29 Mar 2017 07:00:00 +0000</pubDate>
</item>
<item>
	<title>Webtools News: WTP 3.8.2 Released!</title>
	<guid isPermaLink="false">http://www.eclipse.org/webtools/news.php#permalink176</guid>
	<link>http://eclipse.org/webtools/releases/3.8.2</link>
	<description>&lt;div&gt;
    The Web Tools Platform's 3.8.2 Release is now available!  &lt;a href=&quot;https://wiki.eclipse.org/WTP_FAQ#How_do_I_install_WTP.3F&quot;&gt;Installation&lt;/a&gt; and update can be performed using the Neon Update Site at
    &lt;a href=&quot;http://download.eclipse.org/releases/neon/&quot;&gt;http://download.eclipse.org/releases/neon/&lt;/a&gt;, or the &lt;a href=&quot;http://www.eclipse.org/webtools/news/#permalink175&quot;&gt;Eclipse Marketplace&lt;/a&gt;.  Release 3.8.2 &lt;a href=&quot;https://www.eclipse.org/webtools/releases/3.8.2/&quot;&gt;fixes&lt;/a&gt; issues that occur in prior releases or have been reported since 3.8.1's release.
    WTP 3.8.2 is featured in the Neon.3
        &lt;a href=&quot;https://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/neon3&quot;&gt;Eclipse IDE for Java EE Developers&lt;/a&gt;, with selected features also included in &lt;a href=&quot;http://www.eclipse.org/downloads/compare.php&quot;&gt;other packages&lt;/a&gt;.  Adopters can download &lt;a href=&quot;http://download.eclipse.org/webtools/downloads/&quot;&gt;the build itself&lt;/a&gt; directly.
    &lt;/div&gt;&lt;p&gt;&lt;a href=&quot;http://www.eclipse.org/webtools/news.php#permalink176&quot;&gt;More news&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 28 Mar 2017 15:01:00 +0000</pubDate>
</item>
<item>
	<title>Ian Skerrett: Work on IoT that Matters</title>
	<guid isPermaLink="false">http://ianskerrett.wordpress.com/?p=4007</guid>
	<link>http://feedproxy.google.com/~r/IanSkerrett/~3/rptkplmmBTo/</link>
	<description>&lt;p&gt;Tim O’Reilly use to talk a lot about encouraging people to ‘&lt;a href=&quot;http://radar.oreilly.com/2009/01/work-on-stuff-that-matters-fir.html&quot;&gt;Work on stuff that matters&lt;/a&gt;‘. Unfortunately, the IoT industry is often not the best example of this principle. The twitter feed ‘&lt;a href=&quot;https://twitter.com/internetofshit&quot;&gt;Internet of Shit&lt;/a&gt;‘ chronicles IoT solutions that should never have been built. For IoT to be successful we need more example of how IoT can make substantial and meaningful change in our lives.&lt;/p&gt;
&lt;p&gt;For this reason, I was encouraged and impressed by the recent &lt;a href=&quot;https://www.eclipse.org/org/press-release/openiotchallenge3_winners.php&quot;&gt;winners of the Eclipse IoT Developer Challenge&lt;/a&gt;.  All three winners and many of the participants are working on use cases that have significant impact. For example,&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Sleep analysis for mood disorders&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/inmoodforlife/in-the-mood-for-life-open-iot-challenge-final-report-a0c19482118c#.fgxnwhxqc&quot;&gt;InMoodforLife &lt;/a&gt;is an application to analyze sleep patterns of individuals affected by bipolar disorder. They are using off-the-shelf hardware components, open source software and deep learning research to analyze sleep patterns and then help predict mood disorders. The intent is to provide a solution that helps improve the approach for therapy and provide quicker treatment.  This solution will have a significant impact for the individuals and families.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Smarter farming&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://krishi-iot.blogspot.ca/2017/02/krishi-iot-final-report.html&quot;&gt;Krishi IoT&lt;/a&gt; is working to make farming more efficient and smarter. They are solving day-to-day issues experienced by farmers, like irrigation, crop diseases, pest protection and are building a solution that is accessible and affordable by all farmers.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Reduce your home energy bill&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://eneristics.wordpress.com/2017/02/27/rhds-final-report-what-we-accomplished/&quot;&gt;RHDS&lt;/a&gt; has taken on the challenge of creating a solution that will reduce home energy consumption, increase comfort and create a healthier living environment. They were able to demonstrate in near real-time, a solution to calculate and present the Key Metrics of a professional Energy Audit. They used algorithms from Building Science, open source software and low cost sensors to create a $200 solution that would normally be done by experts at a cost of $300-$500.&lt;/p&gt;
&lt;h3&gt;IoT Solutions that Matter&lt;/h3&gt;
&lt;p&gt;All three of these solutions are examples of Work on IoT that Matters. Congratulations to all these winners that are demonstrating the creativity and innovation that is possible through open hardware and open software. We are proud to have &lt;a href=&quot;https://iot.eclipse.org/&quot;&gt;Eclipse IoT&lt;/a&gt; involved in IoT Solutions that Matter.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/ianskerrett.wordpress.com/4007/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/ianskerrett.wordpress.com/4007/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=ianskerrett.wordpress.com&amp;amp;blog=405862&amp;amp;post=4007&amp;amp;subd=ianskerrett&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/IanSkerrett/~4/rptkplmmBTo&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 28 Mar 2017 14:45:51 +0000</pubDate>
</item>
<item>
	<title>itemis: Git Pro Tip: Show Branch in Command Line Prompt</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/git-pro-tip-show-branch-in-command-line-prompt</guid>
	<link>https://blogs.itemis.com/en/git-pro-tip-show-branch-in-command-line-prompt</link>
	<description>&lt;p&gt;I am a heavy Git on command line user. Since I work a lot with branches it is important to know which branch I am currently on. Here's a nifty trick for all of you juggling many branches simultaneously. While I could type &lt;code&gt;git branch&lt;/code&gt; every time and have a look at the result, this is pretty tedious. As there is always a command prompt visible on the command line, I was wondering what if the prompt instead of&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;MacDietrich:xtext-core dietrich$
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;would look like&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;MacDietrich:xtext-core[master] dietrich$
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There is a solution for that: The magic &lt;code&gt;PS1&lt;/code&gt; environment variable that defines the prompt. We can simply change it to include the current git branch if there is one. I added following lines to my &lt;code&gt;~/.bash_profile&lt;/code&gt; file&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;parse_git_branch() {
    git branch 2&amp;gt; /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/[\1]/'
}
export PS1=&quot;\h:\W\$(parse_git_branch) \u$ &quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and reloaded the &lt;code&gt;~/.bash_profile&lt;/code&gt; file by typing &lt;code&gt;source ~/.bash_profile&lt;/code&gt;. &lt;/p&gt; 
&lt;p&gt;Problem solved.&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fgit-pro-tip-show-branch-in-command-line-prompt&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 28 Mar 2017 14:21:30 +0000</pubDate>
	<author>dietrich@itemis.de (Christian Dietrich)</author>
</item>
<item>
	<title>Kichwa Coders: Technical Debt: How Do You Unfork a Fork?</title>
	<guid isPermaLink="false">http://kichwacoders.com/?p=1697</guid>
	<link>https://kichwacoders.com/2017/03/28/technical-debt-how-do-you-unfork-a-fork/</link>
	<description>&lt;p&gt;&lt;img alt=&quot;filled_cirle_point_style_graph&quot; class=&quot; size-full wp-image-1906 aligncenter&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/filled_cirle_point_style_graph.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Everyone knows how to fork that interesting open source project, it’s simple and handy to do. What’s not so easy to do is to merge back a fork that has over the years taken on a life of its own and for many reasons has diverged drastically from the original repo.&lt;/p&gt;
&lt;p&gt;This is a case study of an ongoing project we are doing with SWT XYGraph, a visualisation project that is now part of Eclipse Nebula. It is the story of a fork of SWT XYGraph maintained by Diamond Light Source, the UK’s national synchrotron. But mostly it is a story about the efforts to merge the fork, reduce technical debt, and work towards the goal of sharing software components for Science, a key goal of the Eclipse Science Working Group.&lt;/p&gt;
&lt;h2&gt;Know Your History&lt;/h2&gt;
&lt;p&gt;One of the first things in this project was to understand the history – spanning 8 years – of the fork.  We knew the Diamond fork was done before SWT XYGraph became part of Nebula and under the Eclipse Foundation umbrella. The fork was made in order to quickly add in a number of new features that required some fundamental architectural changes to the code base.&lt;/p&gt;
&lt;p&gt;However on looking through the history, we found there were more than just 2 forks involved. The original project had been developed as part of Control System Studio (CSS) from Oakridge National Labs. CSS had in turn been forked by Diamond and customised for the local facility. Even though SWT XYGraph had been contributed to the Eclipse Nebula project, the original repo and many, many forks were still out there: more than enough forks for a dinner party. I can’t explain it any further in words so will dump our illegible working diagram of it all here:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;forks&quot; class=&quot;alignnone size-large wp-image-1849&quot; height=&quot;1024&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/forks.jpg?w=768&amp;amp;h=1024&quot; width=&quot;768&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Patches were pulled across and merged across forks when it was straightforward to do so. But with so many forks, this was a case where git history really mattered. Anywhere the history was preserved it was straightforward to track the origins of a specific feature – much harder in the cases where the history was lost. Git history is important, always worth some effort to preserve.&lt;/p&gt;
&lt;h2&gt;Choose Your Approach Carefully&lt;/h2&gt;
&lt;p&gt;Deciding if it worthwhile to merge a big fork takes some consideration. The biggest question to ask is: Are the architectural changes fundamentally resolvable? (Not like Chromium’s fork of Webkit – &lt;a href=&quot;https://en.wikipedia.org/wiki/Blink_(web_engine)&quot; target=&quot;_blank&quot;&gt;Blink&lt;/a&gt;). If that is a yes, then it’s a case of trading off the long-term benefits for the short term pain. In this case, Diamond knew it was something they wanted to do, more a matter of timing and picking the correct approach.&lt;/p&gt;
&lt;p&gt;Together there seemed to be 2 main ways to tackle removing the fork that was part of a mature product in constant use at the scientific facility.&lt;/p&gt;
&lt;p&gt;Option 1: Create a branch and work in parallel to get the branch working with upstream version, then merge the branch.&lt;/p&gt;
&lt;p&gt;Option 2: Avoid a branch, but work to incrementally make the fork and upstream SWT XYGraph plug-ins identical, then make the switch over to the upstream version.&lt;/p&gt;
&lt;p&gt;Option 1 had been tried before without success; there were too many moving parts and it created too much overhead, and ironically another fork to maintain. So it was clear this time Option 2 would be the way forward.&lt;/p&gt;
&lt;h2&gt;Tools are Your Friend&lt;/h2&gt;
&lt;p&gt;The incremental merging of the two needed to be done in a deliberate, reproducible manner to make it easier to trace back any issues coming up. Here are the tools that were useful in doing this.&lt;/p&gt;
&lt;h3&gt;1. Git Diff&lt;/h3&gt;
&lt;p&gt;The first step was to get an idea of the scale of the divergence, both quantitatively and qualitatively.&lt;/p&gt;
&lt;p&gt;For quantity, a rough and ready measure was obtained by using git diff:&lt;/p&gt;
&lt;pre class=&quot;brush: bash; title: ; notranslate&quot;&gt;$ git diff --shorstat &amp;lt;diamond&amp;gt; &amp;lt;nebula&amp;gt;
399 files changed, 15648 insertions(+), 15368 deletions(-)

$ git diff &amp;lt;diamond&amp;gt; &amp;lt;nebula&amp;gt; | wc -l
37874
&lt;/pre&gt;
&lt;h3&gt;2. Eclipse IDE’s JDT formatter&lt;/h3&gt;
&lt;p&gt;Next, we needed to remove diffs that were just down to formatting. For this using Eclipse IDE and the quick &amp;amp; easy formatting. Select “src” folder, choose Source menu -&amp;gt; Format. All code formatted to Eclipse standard in one go.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;format_src_folder&quot; class=&quot;alignnone size-full wp-image-1880&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/format_src_folder.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;3. Merge Tools&lt;/h3&gt;
&lt;p&gt;Then it was time to dive into the differences and group them into features, separating quick fixes from changes that broke APIs. For this we used the free and open &lt;a href=&quot;http://meldmerge.org/&quot; target=&quot;_blank&quot;&gt;meld&lt;/a&gt; on Linux.&lt;/p&gt;
&lt;h3&gt;3. EGit Goodness&lt;/h3&gt;
&lt;p&gt;Let’s say we found a line of code different in the fork. To work out where the feature had come from, we could use ‘&lt;a href=&quot;https://git-scm.com/docs/git-blame&quot; target=&quot;_blank&quot;&gt;git blame&lt;/a&gt;‘ but much nicer is the &lt;a href=&quot;http://www.vogella.com/tutorials/EclipseGit/article.html#see-git-information-line-by-line-aka-git-blame&quot; target=&quot;_blank&quot;&gt;eGit support in Eclipse IDE&lt;/a&gt;. Show annotations was regularly used to try to work out where that feature had come from, which fork it had been originally created on and then see if we could find any extra information such as bugzilla or JIRA tickets describing the feature. We were always grateful for code with good and helpful commit messages.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;egit_annotations.png&quot; class=&quot;alignnone size-full wp-image-1888&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/egit_annotations1.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;3. Bug Tracking Tools&lt;/h3&gt;
&lt;p&gt;In this case we were using two different bug trackers: Bugzilla on the Eclipse Nebula side of things and JIRA on the Diamond side of things. As part of the merge, we were contributing lots and lots of distinct features to Nebula, we had a parent issue: &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=513865&quot; target=&quot;_blank&quot;&gt;Bug 513865&lt;/a&gt; to which we linked all the underlying fixes and features, aiming to keep each one distinct and standalone. At the time of writing that meant 21 dependent bugs.&lt;/p&gt;
&lt;h3&gt;4. Gerrits &amp;amp; Pull Requests&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://git.eclipse.org/r/#/q/project:nebula/org.eclipse.nebula+owner:jonah%2540kichwacoders.com&quot; target=&quot;_blank&quot;&gt;Gerrits&lt;/a&gt; were created for each bug for Eclipse Nebula. &lt;a href=&quot;https://github.com/DawnScience/swt-xy-graph/pull/11&quot; target=&quot;_blank&quot;&gt;Pull requests&lt;/a&gt; were created for each change going to Diamond’s DAWN (over 50 to date). Each was reviewed before being committed back. In many cases we took the opportunity to tidy code up or enhance it with things like standalone examples that could be used to demonstrate the feature.&lt;/p&gt;
&lt;h3&gt;5. Github Built-in Graphs&lt;/h3&gt;
&lt;p&gt;It was also good to use the built in Github built in Graphs  (on any repository click on ‘Graphs’ tab), first to see other forks out in the wild (&lt;a href=&quot;https://github.com/DawnScience/swt-xy-graph/network/members&quot; target=&quot;_blank&quot;&gt;Members tab&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;members&quot; class=&quot;alignnone size-full wp-image-1834&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/members.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Then the ‘Network’ tab to keep track of the relationship with those forks compared to the main Diamond fork:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;networkgraph&quot; class=&quot;alignnone size-full wp-image-1833&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/networkgraph.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Much nicer than our hand-drawn effort from earlier, though in this case not all the code being dealt with was in Github.&lt;/p&gt;
&lt;h2&gt;Win/Win&lt;/h2&gt;
&lt;p&gt;The work is ongoing and we are getting to the tricky parts – the key reasons the forks were created in the first place – to make fundamental changes to the architecture. This will require some conversations to understand the best way forward. Already with the work that has been done, there has been mutual benefits: Diamond get new features and bug fixes developed in the open source and Eclipse Nebula get new features and bug fixes developed at Diamond Light Source. The &lt;a href=&quot;https://wiki.eclipse.org/Nebula/Releases/1.3.0/NaN&quot; target=&quot;_blank&quot;&gt;New &amp;amp; Noteworthy&lt;/a&gt; for Eclipse Nebula shows off screenshots of all the new features as a result of this merge.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Nebula_N&amp;amp;N_1.3_-_improved_mouse_cursors&quot; class=&quot;alignnone size-full wp-image-1839&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/nebula_nn_1-3_-_improved_mouse_cursors.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Going forward this paves the way for Diamond to not only get rid of duplicate maintenance of &amp;gt;30,000 lines of Java code (according to &lt;a href=&quot;https://github.com/AlDanial/cloc&quot; target=&quot;_blank&quot;&gt;cloc&lt;/a&gt;), but to contribute some significant features they have developed that integrate with SWT XYGraph. In doing so with the Eclipse Science Working Group it make a great environment to collaborate in open source and make advancements that benefit all involved.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kichwacoders.wordpress.com/1697/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/kichwacoders.wordpress.com/1697/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=kichwacoders.com&amp;amp;blog=68353182&amp;amp;post=1697&amp;amp;subd=kichwacoders&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 28 Mar 2017 13:06:24 +0000</pubDate>
</item>
<item>
	<title>Jeremie Bresson: Mylyn Wikitext is available on maven central</title>
	<guid isPermaLink="true">http://jmini.github.io/blog/2017/2017-03-26_wikitext_on_maven_central.html</guid>
	<link>http://jmini.github.io/blog/2017/2017-03-26_wikitext_on_maven_central.html</link>
	<description>&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;As announced in my &lt;a href=&quot;http://jmini.github.io/blog/2017/2017-02-02_wikitext_v3.html&quot;&gt;previous blog post&lt;/a&gt;, important refactorings are going in the mylyn wikitext project. One of the first goals is achieved: the jars are now available on maven central (see also &lt;a href=&quot;http://greensopinion.com/2017/03/06/Mylyn-WikiText-on-Maven-Central.html&quot;&gt;Mylyn WikiText on Maven Central&lt;/a&gt; by David Green). Have a look at the &lt;a href=&quot;https://mvnrepository.com/artifact/org.eclipse.mylyn.docs&quot;&gt;org.eclipse.mylyn.docs group&lt;/a&gt; in a maven central viewer (right now the newest version is &lt;code&gt;3.0.6&lt;/code&gt;).&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;Wikitext provides the capability to transform from one language to another. I have already blogged about the &lt;a href=&quot;http://jmini.github.io/blog/2016/2016-12-21_convert_to_asciidoc.html&quot;&gt;possibility to convert to AsciiDoc&lt;/a&gt; from Eclipse IDE (new feature introduced with Oxygen M4).&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;imageblock&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;img alt=&quot;Convert from textile to AsciiDoc with Eclipse IDE&quot; src=&quot;http://jmini.github.io/blog/2017/2017-03-26_generate-asciidoc.png&quot; /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;Let demonstrates how you can convert from MediaWiki to AsciiDoc, directly in a small Java program. It is just a few lines of code in a simple main class.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;imageblock&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;img alt=&quot;From MediaWiki to Asciidoctor (logos)&quot; src=&quot;http://jmini.github.io/blog/2017/2017-03-26_mediawiki_to_adoc.png&quot; /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;In the Example the content of the &lt;a href=&quot;http://wiki.eclipse.org/Scout/Contribution&quot;&gt;Scout/Contribution page&lt;/a&gt; taken from the Eclipse wiki will be converted into an AsciiDoc File: &lt;code&gt;scout_contribution.adoc&lt;/code&gt;. The code is straight forward:&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;listingblock&quot;&gt; 
 &lt;div class=&quot;title&quot;&gt;
  Listing 1. Example main class
 &lt;/div&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;import java.io.File;
import java.io.StringWriter;
import java.net.URL;

import org.eclipse.mylyn.wikitext.asciidoc.internal.AsciiDocDocumentBuilder;
import org.eclipse.mylyn.wikitext.mediawiki.MediaWikiLanguage;
import org.eclipse.mylyn.wikitext.parser.DocumentBuilder;
import org.eclipse.mylyn.wikitext.parser.MarkupParser;

import com.google.common.base.Charsets;
import com.google.common.io.Files;
import com.google.common.io.Resources;

public class MediaWikiToAdocExample {

  public static void main(String[] args) throws Exception {
    String url = &quot;http://wiki.eclipse.org/index.php?title=Scout/Contribution&amp;amp;action=raw&amp;amp;templates=expand&quot;;
    String input = Resources.toString(new URL(url), Charsets.UTF_8);

    MediaWikiLanguage markupLanguage = new MediaWikiLanguage();
    markupLanguage.setInternalLinkPattern(&quot;https://wiki.eclipse.org/index.php?title={0}&quot;);
    MarkupParser parser = new MarkupParser(markupLanguage);

    StringWriter writer = new StringWriter();
    DocumentBuilder builder = new AsciiDocDocumentBuilder(writer);
    parser.setBuilder(builder);
    parser.parse(input);

    String output = &quot;= Eclipse Scout - Contribution\n\n&quot;;
    output += writer.toString();
    Files.write(output, new File(&quot;scout_contribution.adoc&quot;), Charsets.UTF_8);
  }
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;On your classpath, you will need some of the wikitext jars and google guava. The &lt;code&gt;pom.xml&lt;/code&gt; File for Maven looks like this:&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;listingblock&quot;&gt; 
 &lt;div class=&quot;title&quot;&gt;
  Listing 2. pom.xml for the Example
 &lt;/div&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

    &amp;lt;groupId&amp;gt;wikitext.examples&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mediawiki-to-adoc&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;

    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.eclipse.mylyn.docs&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;org.eclipse.mylyn.wikitext&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.0.6&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.eclipse.mylyn.docs&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;org.eclipse.mylyn.wikitext.mediawiki&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.0.6&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.eclipse.mylyn.docs&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;org.eclipse.mylyn.wikitext.asciidoc&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.0.6&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.google.guava&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;guava&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;21.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;

    &amp;lt;build&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;3.6.0&amp;lt;/version&amp;gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt;
                    &amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt;
                &amp;lt;/configuration&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;
&amp;lt;/project&amp;gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;Here is a side by side comparison of the wiki page and of a preview of &lt;code&gt;scout_contribution.adoc&lt;/code&gt;:&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;imageblock&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;a class=&quot;image&quot; href=&quot;http://jmini.github.io/blog/2017/2017-03-26_mediawiki_and_adoc_preview.png&quot;&gt;&lt;img alt=&quot;2017 03 26 mediawiki and adoc preview 800&quot; src=&quot;http://jmini.github.io/blog/2017/2017-03-26_mediawiki_and_adoc_preview_800.png&quot; /&gt;&lt;/a&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;If you look very closely at this example, you might notice some issues during the conversion process. I have reported them in &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=508262&quot;&gt;Bug 508262&lt;/a&gt;.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;If you are interessted by the Mylyn Wikitext project, you can follow &lt;a href=&quot;https://twitter.com/WikiText&quot;&gt;@WikiText&lt;/a&gt; on twitter. You can ask questions on StackOverflow using the &lt;a href=&quot;http://stackoverflow.com/questions/tagged/mylyn-wikitext&quot;&gt;mylyn-wikitext&lt;/a&gt; tag. Are you looking for more usage examples of Mylyn Wikitext? Have a look at &lt;a href=&quot;https://github.com/greensopinion/wikitext-examples&quot;&gt;greensopinion/wikitext-examples&lt;/a&gt; on GitHub. David Green has prepared additional use cases there.&lt;/p&gt; 
&lt;/div&gt;</description>
	<pubDate>Sat, 25 Mar 2017 23:00:00 +0000</pubDate>
</item>
<item>
	<title>Paolo Patierno: A new “Kafka” novel : the OpenShift &amp; Kubernetes deployment</title>
	<guid isPermaLink="false">http://paolopatierno.wordpress.com/?p=4198</guid>
	<link>https://paolopatierno.wordpress.com/2017/03/25/a-new-kafka-novel-the-openshift-kubernetes-deployment/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;This blog post doesn’t want to be an exhaustive tutorial to describe the way to go for having &lt;strong&gt;&lt;a href=&quot;https://kafka.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Kafka&lt;/a&gt;&lt;/strong&gt; deployed in an &lt;strong&gt;&lt;a href=&quot;https://www.openshift.com/&quot; target=&quot;_blank&quot;&gt;OpenShift&lt;/a&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;a href=&quot;https://kubernetes.io/&quot; target=&quot;_blank&quot;&gt;Kubernetes&lt;/a&gt;&lt;/strong&gt; cluster but just the story of my journey for having a “working” deployment and using it as a starting point to improve over time with a daily basis work in progress. This journey started using Apache Kafka 0.8.0, went through 0.9.0, finally reaching the nowadays 0.10.1.0 version.&lt;/p&gt;
&lt;h1 style=&quot;text-align: justify;&quot;&gt;From “stateless” to “stateful”&lt;/h1&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;One of the main reasons to use a platform like OpenShift/Kubernetes (let me to use OS/K8S from now) is the scalability feature we can have for our deployed applications. With “stateless” applications there are not so much problems to use such a platform for a Cloud deployment; every time an application instance crashes or needs to be restarted (and/or relocated to a different node), just spin up a new instance without any relationship with the previous one and your deployment will continue to work properly as before. There is no need for the new instance to have information or state related to the previous one.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;It’s also true that, out there, we have a lot of different applications which need to persist state information if something goes wrong in the Cloud and they need to be restarted. Such applications are “stateful” by nature and their “story” is important so that just spinning up a new instance isn’t enough.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The main challenges we have with OS/K8S platform are :&lt;/p&gt;
&lt;ul style=&quot;text-align: justify;&quot;&gt;
&lt;li&gt;pods are &lt;strong&gt;scaled out and scaled in&lt;/strong&gt; through Replica Sets (or using Deployment object)&lt;/li&gt;
&lt;li&gt;pods will be assigned an &lt;strong&gt;arbitrary name&lt;/strong&gt; at runtime&lt;/li&gt;
&lt;li&gt;pods &lt;strong&gt;may be restarted and relocated&lt;/strong&gt; (on a different node) at any point in time&lt;/li&gt;
&lt;li&gt;pods may &lt;strong&gt;never be referenced directly by the name or IP address&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;a service &lt;strong&gt;selects a set of pods&lt;/strong&gt; that match specific criterion and &lt;strong&gt;exposes them&lt;/strong&gt; through a well-defined endpoint&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;All the above considerations aren’t a problem for “stateless” applications but they are for “stateful” ones.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The difference between them is also know as &lt;strong&gt;“Pets vs Cattle”&lt;/strong&gt; meme, where “stateless” applications are just a herd of cattle and when one of them die, you can just replace it with a new one having same characteristics but not exactly the same (of course !); the “stateful” applications are like pets, you have to take care of them and you can’t just replace a pet if it’s die &lt;img alt=&quot;😦&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f626.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Just as reference you can read about the history of “Pets vs Cattle” in this &lt;a href=&quot;http://cloudscaling.com/blog/cloud-computing/the-history-of-pets-vs-cattle/&quot; target=&quot;_blank&quot;&gt;article&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Apache Kafka is one of these type of applications … it’s a pet … which needs to be handle with care. Today, we know that OS/K8S offers &lt;strong&gt;Stateful Sets&lt;/strong&gt; (previously known as &lt;strong&gt;Pet Sets&lt;/strong&gt; … for clear reasons!) that can be used in this scenario but I started this journey when they didn’t exist (or not released yet), so I’d like to share with you my story, the main problems I encountered and how I solved them (you’ll see that I have “emulated” something that Stateful Sets offer today out of box).&lt;/p&gt;
&lt;h1 style=&quot;text-align: justify;&quot;&gt;Let’s start with a simple architecture&lt;/h1&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Let’s start in a very simple way using a Replica Set (only one replica) for Zookeeper server and the related service and a Replica Set (with three replicas) for Kafka servers and the related service.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;img alt=&quot;reference_architecture_1st_ver&quot; class=&quot;alignnone size-full wp-image-4245&quot; src=&quot;https://paolopatierno.files.wordpress.com/2017/03/reference_architecture_1st_ver-e1490443315718.png?w=620&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The Kafka Replica Set has three replicas for “quorum” and leader election (even for topic replication). The Kafka service is needed to expose Kafka servers access even to clients. Each Kafka server may need :&lt;/p&gt;
&lt;ul style=&quot;text-align: justify;&quot;&gt;
&lt;li&gt;unique ID (for Zookeeper)&lt;/li&gt;
&lt;li&gt;advertised host/port (for clients)&lt;/li&gt;
&lt;li&gt;logs directory (for storing topic partitions)&lt;/li&gt;
&lt;li&gt;Zookeeper info (for connection)&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The first approach is to use the broker id dynamic generation so that when a Kafka server starts and needs to connect to Zookeeper, a new broker id is generated and assigned to it. The advertised host/port are just container IP and the fixed 9092 port while the logs directory is predefined (by configuration file). Finally, the Zookeeper connection info are provided through the related Zookeeper service using the related environment variables that OS/K8S creates for us (ZOOKEEPER_SERVICE_HOST and ZOOKEEPER_SERVICE_PORT).&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Let’s consider the following use case with a topic (1 partition and 3 replicas). The initial situation is having Kafka servers with broker id 1001, 1002, 1003 and the topic with current state :&lt;/p&gt;
&lt;ul style=&quot;text-align: justify;&quot;&gt;
&lt;li&gt;leader : 1001&lt;/li&gt;
&lt;li&gt;replicas : 1001, 1002, 1003&lt;/li&gt;
&lt;li&gt;ISR : 1001, 1002, 1003&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;It means that clients need to connect to 1001 for sending/receiving messages for the topic and that 1002 and 1003 are followers for having this topic replicated handling failures.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Now, imagine that the Kafka server 1003 crashes and a new instance is just started. The topic description becomes :&lt;/p&gt;
&lt;ul style=&quot;text-align: justify;&quot;&gt;
&lt;li&gt;leader : 1001&lt;/li&gt;
&lt;li&gt;replicas : 1001, 1002, 1003 &lt;strong&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;lt;– it’s still here !&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;ISR  : 1001, 1002 &lt;strong&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;lt;– that’s right, 1003 is not “in-sync”&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Zookeeper still sees the broker 1003 as a host for one of the topic replicas but not “in-sync” with the others. Meantime, the new started Kafka server has a new auto generated id 1004. A manual script execution (through the &lt;em&gt;kafka-preferred-replica-election.sh&lt;/em&gt;) is needed in order to :&lt;/p&gt;
&lt;ul style=&quot;text-align: justify;&quot;&gt;
&lt;li&gt;adding 1004 to the replicas&lt;/li&gt;
&lt;li&gt;removing 1003 from replicas&lt;/li&gt;
&lt;li&gt;new leader election for replicas&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;img alt=&quot;use_case_autogenerated_id.png&quot; class=&quot;alignnone size-full wp-image-4267&quot; height=&quot;417&quot; src=&quot;https://paolopatierno.files.wordpress.com/2017/03/use_case_autogenerated_id-e1490444223796.png?w=608&quot; width=&quot;608&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;So what does it mean ?&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;First of all, the new Kafka server instance needs to have the same id of the previous one and, of course, the same data so the partition replica of the topic. For this purpose, a persistent volume can be the solution used, through a claim, by the Replica Set for storing the logs directory for all the Kafka servers (i.e. /kafka-logs-&amp;lt;broker-id&amp;gt;). It’s important to know that, by Kafka design, a logs directory has a “lock” file locked by the server owner.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;For searching for the “next” broker id to use, avoiding the auto-generation and getting the same data (logs directory) as the previous one, a script (in my case a Python one) can be used on container startup before launching the related Kafka server.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;In particular, the script :&lt;/p&gt;
&lt;ul style=&quot;text-align: justify;&quot;&gt;
&lt;li&gt;searches for a free “lock” file in order to reuse the broker id for the new Kafka server instance …&lt;/li&gt;
&lt;li&gt;… otherwise a new broker id is used and a new logs directory is created&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Using this approach, we obtain the following result for the previous use case :&lt;/p&gt;
&lt;ul style=&quot;text-align: justify;&quot;&gt;
&lt;li style=&quot;text-align: justify;&quot;&gt;the new started Kafka server instance acquires the broker id 1003 (as the previous one)&lt;/li&gt;
&lt;li style=&quot;text-align: justify;&quot;&gt;it’s just automatically part of the replicas and ISR&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;img alt=&quot;use_case_locked_id&quot; class=&quot;alignnone size-full wp-image-4282&quot; src=&quot;https://paolopatierno.files.wordpress.com/2017/03/use_case_locked_id-e1490446920141.png?w=620&quot; /&gt;&lt;/p&gt;
&lt;h1 style=&quot;text-align: justify;&quot;&gt;But … what on Zookeeper side ?&lt;/h1&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;In this deployment, the Zookeeper Replica Set has only one replica and the service is needed to allow connections from the Kafka servers. What happens if the Zookeeper crashes (application or node fails) ? The OS/K8S platform just restarts a new instance (not necessary on the same node) but what I see is that the currently running Kafka servers can’t connect to the new Zookeeper instance even if it holds the same IP address (through the service usage). The Zookeeper server closes the connections after an initial handshake, probably related to some Kafka servers information that Zookeeper stores locally. Restarting a new instance, this information are lost !&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Even in this case, using a persistent volume for the Zookeeper Replica Set is a solution. It’s used for storing the data directory that will be the same for each instance restarted; the new instance just finds Kafka servers information in the volume and grants connections to them.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;img alt=&quot;reference_architecture_1st_ver_zookeeper&quot; class=&quot;alignnone size-full wp-image-4408&quot; src=&quot;https://paolopatierno.files.wordpress.com/2017/03/reference_architecture_1st_ver_zookeeper1-e1490452106786.png?w=620&quot; /&gt;&lt;/p&gt;
&lt;h1 style=&quot;text-align: justify;&quot;&gt;When the Stateful Sets were born !&lt;/h1&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;At some point (from the 1.5 Kubernetes release), the OS/K8S platform started to offer the Pet Sets then renamed in Stateful Sets like a sort of Replica Sets but for “stateful” application but … what they offer ?&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;First of all, each “pet” has a stable hostname that is always resolved by DNS. Each “pet” is being assigned a name with an ordinal index number (i.e. kafka-0, kafka-1, …) and finally a stable storage is linked to that hostname/ordinal index number.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;It means that every time a “pet” crashes and it’s restarted, the new one will be the same : same hostname, same name with ordinal index number and same attached storage. The previous running situation is fully recovered and the new instance is exactly the same as the previous one. You could see them as something that I tried to emulate with my scripts on container startup.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;So today, my current Kafka servers deployment has :&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;text-align: justify;&quot;&gt;a Stateful set with three replicas for Kafka servers&lt;/li&gt;
&lt;li style=&quot;text-align: justify;&quot;&gt;an “headless” service (so without an assigned cluster IP) that is needed for having Stateful set working (so for DNS hostname resolution)&lt;/li&gt;
&lt;li style=&quot;text-align: justify;&quot;&gt;a “regular” service for providing access to the Kafka servers from clients&lt;/li&gt;
&lt;li style=&quot;text-align: justify;&quot;&gt;one persistent volume for each Kafka server with a claim template defined in the Stateful set declaration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;reference_architecture_statefulsets&quot; class=&quot;alignnone size-full wp-image-4359&quot; src=&quot;https://paolopatierno.files.wordpress.com/2017/03/reference_architecture_statefulsets-e1490450125965.png?w=620&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Other then to use a better implementation &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt; … the current solution doesn’t use a single persistent volume for all the Kafka servers (having a logs directory for each of them) but it’s preferred to use a persistent storage dedicated to only one “pet”.&lt;/p&gt;
&lt;h1 style=&quot;text-align: justify;&quot;&gt;It’s great to read about it but … I want to try … I want to play !&lt;/h1&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;You’re right, I told you my journey that isn’t finished yet but you would like to try … to play with some stuff for having Apache Kafka deployed on OS/K8S.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;I called this project &lt;strong&gt;&lt;a href=&quot;https://github.com/EnMasseProject/barnabas&quot; target=&quot;_blank&quot;&gt;Barnabas&lt;/a&gt;&lt;/strong&gt; like one of the main characters of the author Franz Kafka who was a … messenger in &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Castle_(novel)&quot; target=&quot;_blank&quot;&gt;“The Castel”&lt;/a&gt; novel :-). It’s part of the bigger &lt;strong&gt;&lt;a href=&quot;https://github.com/EnMasseProject&quot; target=&quot;_blank&quot;&gt;EnMasse&lt;/a&gt;&lt;/strong&gt; project which provides a scalable messaging as a service (MaaS) infrastructure running on OS/K8S.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The repo provides different deployment types : from the “handmade” solution (based on bash and Python scripts) to the current Stateful Sets solution that I’ll improve in the coming weeks.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The great thing about that (in the context of the overall EnMasse project) is that today I’m able to use &lt;strong&gt;standard protocols&lt;/strong&gt; like AMQP and MQTT to communicate with an Apache Kafka cluster (using an &lt;a href=&quot;https://github.com/EnMasseProject/amqp-kafka-bridge&quot; target=&quot;_blank&quot;&gt;AMQP bridge&lt;/a&gt; and an &lt;a href=&quot;https://github.com/EnMasseProject/mqtt-gateway&quot; target=&quot;_blank&quot;&gt;MQTT gateway&lt;/a&gt;) for all the use cases where using Kafka makes sense against traditional messaging brokers … that from their side have to tell about a lot of stories and different scenarios &lt;img alt=&quot;😉&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f609.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Do you want to know more about that ? The &lt;strong&gt;&lt;a href=&quot;https://www.redhat.com/en/summit/2017&quot; target=&quot;_blank&quot;&gt;Red Hat Summit 2017&lt;/a&gt;&lt;/strong&gt; (Boston, May 2-4) could be a good place, where me and &lt;a href=&quot;https://twitter.com/christianposta&quot; target=&quot;_blank&quot;&gt;Christian Posta&lt;/a&gt; (Principal Architect, Red Hat) will have the session &lt;a href=&quot;https://rh2017.smarteventscloud.com/connect/search.ww#loadSearch-searchPhrase=kafka&amp;amp;searchType=session&amp;amp;tc=0&amp;amp;sortBy=abbreviationSort&amp;amp;p=&amp;amp;value(otherSpecifyValue_82920)=%3Fsc_cid&quot; target=&quot;_blank&quot;&gt;“Red Hat JBoss A-MQ and Apache Kafka : which to use ?”&lt;/a&gt; … so what are you waiting for ? See you there !&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/paolopatierno.wordpress.com/4198/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/paolopatierno.wordpress.com/4198/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=paolopatierno.wordpress.com&amp;amp;blog=15467422&amp;amp;post=4198&amp;amp;subd=paolopatierno&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;&lt;/p&gt;</description>
	<pubDate>Sat, 25 Mar 2017 14:26:35 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EMF Forms and EMF Client Platform 1.12.0 released!</title>
	<guid isPermaLink="false">http://eclipsesource.com/blogs/?p=27899</guid>
	<link>http://eclipsesource.com/blogs/2017/03/24/emf-forms-and-emf-client-platform-1-12-0-released/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We are happy to announce that together with Neon.3, we have released  &lt;/span&gt;&lt;a href=&quot;http://eclipse.org/ecp/emfforms&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;EMF Forms&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;a href=&quot;http://eclipse.org/ecp&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;EMF Client Platform&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; 1.12.0! &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We want to thank our continuously active team of &lt;/span&gt;&lt;b&gt;12 contributors &lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(&lt;/span&gt;&lt;b&gt;36 contributors&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; over all) for woking on &lt;/span&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/buglist.cgi?bug_status=UNCONFIRMED&amp;amp;bug_status=NEW&amp;amp;bug_status=ASSIGNED&amp;amp;bug_status=REOPENED&amp;amp;bug_status=RESOLVED&amp;amp;bug_status=VERIFIED&amp;amp;bug_status=CLOSED&amp;amp;classification=Modeling&amp;amp;component=Common&amp;amp;component=Editor&amp;amp;component=EMF%20Forms&amp;amp;component=Model%20Workspace&amp;amp;component=Navigator&amp;amp;component=Validation&amp;amp;list_id=15869873&amp;amp;product=ECP&amp;amp;query_format=advanced&amp;amp;target_milestone=1.12.0&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;25 bug reports and feature requests&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. As the list reveals, and due to the short development cycle between Neon.2 and Neon.3, the 1.12.0 release was mainly focussed on bug fixes. The subsequent release will introduce a number of new features again, which are already in the pipeline.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We will give a &lt;/span&gt;&lt;a href=&quot;https://www.eclipseconverge.org/na2017/session/emf-forms-past-present-and-features&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;talk&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; at &lt;/span&gt;&lt;a href=&quot;https://www.eclipseconverge.org/na2017/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Converge 2017&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; also introducing the new features of the latest releases, so make sure &lt;/span&gt;&lt;a href=&quot;https://www.eclipseconverge.org/na2017/registration&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;you register soon&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Please note, that we have began work on EMF Forms / ECP 2.0.0 in parallel to the 1.x development stream. We plan a final 1.x release along with Oxygen (1.13.0). Afterwards, we plan to focus on the 2.0.0 release stream. However, users do not have to worry too much about API breaks. There are two major changes that we wish to apply with 2.0.0. First, we plan to remove API, which is already marked as deprecated. So, if you still use any deprecated API, now is a good time to start refactoring here. Second, we will refactor the way “domain model references” are stored in the model. This will mainly allow us to bind to new data models. For this change, we plan to provide a migration for existing view models, so this change should be seamless for users of the framework.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As always, we will also blog about new features of the EMF Forms / ECP 1.12.0 release in the upcoming weeks! Please follow this blog or follow us on twitter to get notified about the new posts.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In case you don’t know EMF Forms: It is a framework focused on the creation of form-based UIs. EMF Client Platform is designed to support the development of applications based on an EMF data model. If you are not yet familiar with EMF Forms, please refer to &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/tutorials/getting-started-with-EMF-Forms/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;this tutorial&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for a introduction.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Both of these frameworks are part of Eclipse Modeling Tools Neon.3, but you can also find the new release on our download pages:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;http://eclipse.org/ecp/download.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Download EMF Client Platform&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;http://eclipse.org/ecp/emfforms/download.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Download EMF Forms&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;display: inline-block;&quot;&gt;&lt;a href=&quot;https://twitter.com/intent/tweet?source=webclient&amp;amp;text=EMF+Forms+and+EMF+Client+Platform+1.12.0+released%21&amp;amp;via=eclipsesource&amp;amp;url=http://eclipsesource.com/blogs/2017/03/24/emf-forms-and-emf-client-platform-1-12-0-released/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on Twitter&quot;&gt;&lt;img alt=&quot;Twitter&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/twitter.png&quot; title=&quot;Twitter&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://plus.google.com/share?url=http://eclipsesource.com/blogs/2017/03/24/emf-forms-and-emf-client-platform-1-12-0-released/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;+1&quot;&gt;&lt;img alt=&quot;Google+&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/google_plus.png&quot; title=&quot;Google+&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://www.linkedin.com/cws/share?url=http://eclipsesource.com/blogs/2017/03/24/emf-forms-and-emf-client-platform-1-12-0-released/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on LinkedIn&quot;&gt;&lt;img alt=&quot;LinkedIn&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/linkedin.png&quot; title=&quot;LinkedIn&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://www.facebook.com/sharer/sharer.php?u=http://eclipsesource.com/blogs/2017/03/24/emf-forms-and-emf-client-platform-1-12-0-released/&amp;amp;t=EMF+Forms+and+EMF+Client+Platform+1.12.0+released%21&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Facebook&quot;&gt;&lt;img alt=&quot;Facebook&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/facebook.png&quot; title=&quot;Facebook&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/03/24/emf-forms-and-emf-client-platform-1-12-0-released/#respond&quot;&gt;Leave a Comment&lt;/a&gt;. Tagged with &lt;a href=&quot;http://eclipsesource.com/blogs/tag/eclipse/&quot; title=&quot;eclipse Tag&quot;&gt;eclipse&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emf/&quot; title=&quot;emf Tag&quot;&gt;emf&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emfcp/&quot; title=&quot;emfcp Tag&quot;&gt;emfcp&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emfforms/&quot; title=&quot;emfforms Tag&quot;&gt;emfforms&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/eclipse/&quot; title=&quot;eclipse Tag&quot;&gt;eclipse&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emf/&quot; title=&quot;emf Tag&quot;&gt;emf&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emfcp/&quot; title=&quot;emfcp Tag&quot;&gt;emfcp&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emfforms/&quot; title=&quot;emfforms Tag&quot;&gt;emfforms&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
	<pubDate>Fri, 24 Mar 2017 15:04:20 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Papyrus-RT 0.9 is available!</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=579</guid>
	<link>https://papyrusuml.wordpress.com/2017/03/24/papyrus-rt-0-9-is-available/</link>
	<description>&lt;p&gt;As I mentioned in a &lt;a href=&quot;https://papyrusuml.wordpress.com/2017/03/09/papyrus-rt-beta/&quot; target=&quot;_blank&quot;&gt;previous post&lt;/a&gt;, Papyrus for Real Time v0.9 is now available for &lt;a href=&quot;https://eclipse.org/papyrus-rt/content/download.php&quot; target=&quot;_blank&quot;&gt;download&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;And yes, there is a Beta associated with it…but my minions tell me it is still being setup. I’ve been told something will be announced about this next week, and if you are interested in participating, you can just let me know either in comments on this blog or through &lt;a href=&quot;https://twitter.com/PapyrusUML&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt; &lt;a href=&quot;https://twitter.com/PapyrusUML&quot; target=&quot;_blank&quot;&gt;@PapyrusUML&lt;/a&gt;. I’ll then let my minions know!&lt;/p&gt;
&lt;p&gt;Are you curious about this release? Then have a look at the &lt;a href=&quot;https://wiki.eclipse.org/Papyrus-RT/Releases/Neon_v0.9_Release_Notes&quot; target=&quot;_blank&quot;&gt;Release Notes&lt;/a&gt;.&lt;/p&gt;&lt;br /&gt;Filed under: &lt;a href=&quot;https://papyrusuml.wordpress.com/category/news/&quot;&gt;News&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/papyrus-rt/&quot;&gt;Papyrus-RT&lt;/a&gt; Tagged: &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/release/&quot;&gt;release&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/papyrusuml.wordpress.com/579/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/papyrusuml.wordpress.com/579/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/papyrusuml.wordpress.com/579/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/papyrusuml.wordpress.com/579/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/papyrusuml.wordpress.com/579/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/facebook/papyrusuml.wordpress.com/579/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/papyrusuml.wordpress.com/579/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/twitter/papyrusuml.wordpress.com/579/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/papyrusuml.wordpress.com/579/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/papyrusuml.wordpress.com/579/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/papyrusuml.wordpress.com/579/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/papyrusuml.wordpress.com/579/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/papyrusuml.wordpress.com/579/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/papyrusuml.wordpress.com/579/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=papyrusuml.wordpress.com&amp;amp;blog=72365150&amp;amp;post=579&amp;amp;subd=papyrusuml&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 24 Mar 2017 13:47:27 +0000</pubDate>
</item>
<item>
	<title>Tom Schindl: e(fx)clipse runtime library – Working with the (JavaFX) UI-Thread</title>
	<guid isPermaLink="false">http://tomsondev.bestsolution.at/?p=5012</guid>
	<link>https://tomsondev.bestsolution.at/2017/03/23/efxclipse-runtime-library-working-with-the-javafx-ui-thread/</link>
	<description>&lt;p&gt;When developing UI-Application a very frequent task is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to synchronizes yourself back from an worker-thread to the UI-Thread&lt;/li&gt;
&lt;li&gt;schedule task to run in the future&lt;/li&gt;
&lt;li&gt;Block the program flow and wait for a condition being met (in SWT called spinning the event loop)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JavaFX 8 has a public API for most of those building blocks (only exception is Event-Loop-Spinning who was an internal API in Java8 and is public API in 9) but using higher level API reduces the boilerplate code you need to implement.&lt;/p&gt;
&lt;p&gt;Before we start let’s see how you can access to it in your maven-driven projects (I’m not gradle safey enough to show how it works there) you need to &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add the &lt;a href=&quot;http://maven.bestsolution.at/&quot;&gt;efxclipse&lt;/a&gt; maven repository (at the time of this writing you need to nightly repository because you need at least 3.0.0)&lt;/li&gt;
&lt;li&gt;add the following dependency
&lt;pre class=&quot;brush: xml; title: ; notranslate&quot;&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;at.bestsolution.efxclipse.rt&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;org.eclipse.fx.ui.controls&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;3.0.0-SNAPSHOT&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s take a look at some of those APIs and how they can help you write better code:&lt;/p&gt;
&lt;h2&gt;Writing back from worker thread&lt;/h2&gt;
&lt;p&gt;Let’s suppose we have a service who returns a search result as a &lt;code&gt;CompletableFuture&lt;/code&gt; and we want to push the result – once available – to JavaFX ObjectProperty:&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;import org.eclipse.fx.core.ServiceUtils;

// Lookup the domain service in the service registry
PersonSearchService service = 
  ServiceUtils.getService(PersonSearchService.class);

ObjectProperty&amp;lt;Person&amp;gt; person = ...;

CompletableFuture&amp;lt;Person&amp;gt; result = 
  service.findByName(&quot;Tom&quot;,&quot;Schindl&quot;);
&lt;/pre&gt;
&lt;p&gt;Let’s for a second suppose we can interact with our UI-Toolkit on ANY-Thread we could simply write:&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;result.thenAccept( person::set );
&lt;/pre&gt;
&lt;p&gt;Unfortunately none of the UI-Toolkits I know would support this because they require you to sync on a special thread called the UI-Thread. JavaFX is not different in this aspect.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Plain JavaFX APIs:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;result.thenAccept( p -&amp;gt; {
   Platform.runLater( () -&amp;gt;
     person.set(p);
   );
} );
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Using e(fx)clipse’ &lt;code&gt;ThreadSynchronize#asyncExec(T,Consumer&amp;lt;T&amp;gt;)&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;import org.eclipse.fx.core.ThreadSynchronize;

// ...

// Lookup the thready service in the service registry
ThreadSynchronize threadSync = 
  ServiceUtils.getService(ThreadSynchronize.class).get();

result.thenAccept( p -&amp;gt; {
   threadSync.asyncExec( p, person::set );
});
&lt;/pre&gt;
&lt;p&gt;We got rid of the inner lambda and replaced it with a method reference, so the code got more readable but&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using e(fx)clipse’ &lt;code&gt;ThreadSynchronize#wrap(Consumer&amp;lt;T&amp;gt;)&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;// ...
result.thenAccept( threadSync.wrap(person::set) );
&lt;/pre&gt;
&lt;p&gt;we can get rid of all outer lambda as well and are back to fairly the same code as if we’d not had to worry about thread-synchronization at all.&lt;/p&gt;
&lt;h2&gt;Reading from a worker thread&lt;/h2&gt;
&lt;p&gt;Let’s suppose you have a Timer running who wants to read a JavaFX-Property from a TextField in 1 second from now you’d:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You’d better rewrite it to use a Timeline so that no thread sync is needed&lt;/li&gt;
&lt;li&gt;You’d write the following magic lines of code:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;TextField textField = ...

Timer t = new Timer();
t.schedule( new TimerTask() {
  @Override
  public void run() {
    CountDownLatch ll = new CountDownLatch(1);
    AtomicReference&amp;lt;String&amp;gt; data = new AtomicReference&amp;lt;&amp;gt;();
    Platform.runLater( () -&amp;gt; {
      data.set( textField.getText() );
      ll.countDown();
    });
    ll.await();
    String d = data.get();
    // further process the data 
  }
}, 1000 );
&lt;/pre&gt;
&lt;p&gt;Let’s for a moment forget that this code fairly dangerous because it might create a dead lock situation (hence JavaFX only provides &lt;code&gt;Platform.runLater(Runnable)&lt;/code&gt;) this is a huge amount of code to write! Let’s see what APIs e(fx)clipse has to improve the situation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using &lt;code&gt;ThreadSynchronize#syncExec(Runnable)&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;ThreadSynchronize threadSync = 
  ServiceUtils.getService(ThreadSynchronize.class).get();

public void run() {
  AtomicReference&amp;lt;String&amp;gt; data = new AtomicReference&amp;lt;&amp;gt;();
  threadSync.syncExec( () -&amp;gt; {
    data.set( textField.getText() );
  } );
  String d = data.get();
  // further process the data 
}
&lt;/pre&gt;
&lt;p&gt;Removes the need for the &lt;code&gt;CountDownLatch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using &lt;code&gt;ThreadSynchronize#syncExec(Callable&amp;lt;V&amp;gt;, V)&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;public void run() {
  String d = threadSync.syncExec( textField::getText, &quot;&quot; );
}
&lt;/pre&gt;
&lt;p&gt;Removes the need for the &lt;code&gt;AtomicReference&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using &lt;code&gt;ThreadSynchronize#scheduleExecution(long, Runnable)&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;ExecutorService s = ...;
threadSync.scheduleExecution( 1000, () -&amp;gt; {
   String data = textField.getText();
   s.submit( () -&amp;gt; ... );
} );
&lt;/pre&gt;
&lt;p&gt;Removes the thread synchronization problems arising from &lt;code&gt;Platform.runLater()&lt;/code&gt; call&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using &lt;code&gt;ThreadSynchronize#scheduleExecution(long, Callable&amp;lt;T&amp;gt;) : CompletableFuture&amp;lt;T&amp;gt; &lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;threadSync.scheduleExecution( 1000, textField::getText )
  .thenAcceptAsync( d -&amp;gt; ... );
&lt;/pre&gt;
&lt;p&gt;Removes the lambda and gets you to the wonderful &lt;code&gt;CompletableFuture&lt;/code&gt;-API.&lt;/p&gt;
&lt;h2&gt;Block program flow&lt;/h2&gt;
&lt;p&gt;Generally speaking halting the program flow is a discouraged software pattern and you’d better work with &lt;code&gt;Future&lt;/code&gt; and callbacks like &lt;code&gt;Consumer&lt;/code&gt; but there might be (existing) API you have to support who requires you to halt the program flow and continue after a certain condition has been met.&lt;/p&gt;
&lt;p&gt;To support such a usecase e(fx)clipse has &lt;code&gt;org.eclipse.fx.ui.controls.Util#waitUntil( BlockCondition blockCondition )&lt;/code&gt; you can use like this&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;Pane p = ...;

// Ask for name in an overlay
String askForName() {
  BlockCondition&amp;lt;String&amp;gt; condition = new BlockCondition&amp;lt;&amp;gt;();

  TextField t = new TextField();
  Button b = new Button(&quot;Proceed&quot;);
  b.setOnAction( e -&amp;gt; { condition.release(t.getText()); } );
  HBox box = new HBox(
    new Label(&quot;Name:&quot;),
    t,
    b);
  box.setManaged(false);
  box.autosize();
  box.relocate( 
    p.getWidth() / 2 - box.getWidth() / 2, 
    p.getHeight() / 2 - box.getHeight() / 2 );
  p.getChildren().add( box );
  return Util.waitUntil( condition );
}
&lt;/pre&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/tomsondev.wordpress.com/5012/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/tomsondev.wordpress.com/5012/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=tomsondev.bestsolution.at&amp;amp;blog=7995503&amp;amp;post=5012&amp;amp;subd=tomsondev&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 23 Mar 2017 13:08:16 +0000</pubDate>
</item>
<item>
	<title>Orion: Orion 14.0 New and Noteworthy</title>
	<guid isPermaLink="false">http://planetorion.org/news/?p=879</guid>
	<link>http://planetorion.org/news/2017/03/orion-14-0-new-and-noteworthy/</link>
	<description>&lt;p&gt;Another three months and &lt;a href=&quot;http://planetorion.org/news/2017/03/announcing-orion-14/&quot;&gt;another awesome release&lt;/a&gt;! Its that time again where I share all of the cool new features, enhancements and fixes with you. As usual with every release, there were lots of changes, so lets jump right in.&lt;/p&gt;
&lt;h2&gt;Accessibility&lt;/h2&gt;
&lt;p&gt;The work that began in 13.0 to make Orion completely accessible to every developer continued at a furious pace in 14. This time around, our work was focussed on having the correct colour contrast.&lt;/p&gt;
&lt;p&gt;We tightened up our colours in the light theme so that all colours pass the &lt;a href=&quot;https://www.w3.org/TR/WCAG20/#guidelines&quot;&gt;WCAG 2.0 AA guideline&lt;/a&gt; for colour contrast. The changes are subtle, but they do make text easier to read, as seen in this before-and-after snapshot of selected code in the editor.&lt;/p&gt;
&lt;div class=&quot;wp-caption alignnone&quot; id=&quot;attachment_880&quot; style=&quot;width: 565px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/compare-selected-colors.png&quot;&gt;&lt;img alt=&quot;Selected text comparison&quot; class=&quot; wp-image-880&quot; height=&quot;317&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/compare-selected-colors.png&quot; width=&quot;555&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Comparing selected text in 14.0 vs. 13.0&lt;/p&gt;&lt;/div&gt;
&lt;h2&gt;Language Tools&lt;/h2&gt;
&lt;h3&gt;Automatic Project Configuration&lt;/h3&gt;
&lt;p&gt;The JavaScript tooling can now read and understand complex project configurations and automatically configure Tern for the best development experience. For example, the tools can better read and understand package.json files and automatically load available plugins into Tern (rather than the user having to tailor their configuration settings).&lt;/p&gt;
&lt;h3&gt;Projects Anywhere&lt;/h3&gt;
&lt;p&gt;Using the new support from the platform to find project contexts, the JavaScript tools can now support a “project” at any level in the navigator. Where a project means any folder that contains JavaScript project-like files – package.json, .tern-project, etc.&lt;/p&gt;
&lt;h3&gt;Smarter Defaults&lt;/h3&gt;
&lt;p&gt;The default configuration for the JavaScript tools has been retooled to provide more support right out of the box. In Orion 13.0 (and before), we started the tools in a very bare-bone fashion, and would alert you about potential configuration changes (with quick fixes). Now we automatically start with ECMA, node and browser support, and configure your project as you code.&lt;/p&gt;
&lt;h3&gt;Disable Linting In-File&lt;/h3&gt;
&lt;p&gt;Tired of being nagged about a particular code pattern used in certain places (but like to be warned elsewhere)? You can now use the new quickfix to ignore the problem in the current file.&lt;/p&gt;
&lt;div class=&quot;wp-caption alignnone&quot; id=&quot;attachment_884&quot; style=&quot;width: 342px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/disable-in-file.png&quot;&gt;&lt;img alt=&quot;Disable rule in-file&quot; class=&quot; wp-image-884&quot; height=&quot;183&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/disable-in-file.png&quot; width=&quot;332&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Disable rule in-file&lt;/p&gt;&lt;/div&gt;
&lt;h3&gt;JavaScript Type Icons&lt;/h3&gt;
&lt;p&gt;In an effort to make the overload of information (while coding in JavaScript) a bit more understandable, we have added icons to help users immediately understand the type of something. For example, &lt;strong&gt;F&lt;/strong&gt; stands for &lt;em&gt;function&lt;/em&gt;, &lt;strong&gt;O&lt;/strong&gt; is for &lt;em&gt;objects&lt;/em&gt;, &lt;strong&gt;C&lt;/strong&gt; is for &lt;em&gt;classes&lt;/em&gt;, etc.&lt;/p&gt;
&lt;div class=&quot;wp-caption alignnone&quot; id=&quot;attachment_885&quot; style=&quot;width: 499px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/js-tools-icons.png&quot;&gt;&lt;img alt=&quot;Type icons&quot; class=&quot; wp-image-885&quot; height=&quot;356&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/js-tools-icons-1024x745.png&quot; width=&quot;489&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Type icons&lt;/p&gt;&lt;/div&gt;
&lt;h3&gt;Improved ESLint configuration file support&lt;/h3&gt;
&lt;p&gt;We have improved how the JavaScript tools handle the various forms of ESLint configuration files. We now properly support all entries of the files (&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=493824&quot;&gt;except for extends&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;SVG Support&lt;/h3&gt;
&lt;p&gt;The CSS and HTML parsers have been updated to properly support &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG&quot;&gt;SVG&lt;/a&gt; attributes and properties. The HTML and CSS validation has also been updated to properly process the new attributes and properties.&lt;/p&gt;
&lt;h2&gt;Platform Improvements&lt;/h2&gt;
&lt;h3&gt;Syntax Styling&lt;/h3&gt;
&lt;p&gt;Syntax styling grammars can now define a &lt;strong&gt;firstLineMatch&lt;/strong&gt; attribute.  This enables multiple grammars to be defined for a content type, and the grammar that gets applied will be chosen based on the first line of content.&lt;/p&gt;
&lt;h3&gt;Tasks&lt;/h3&gt;
&lt;p&gt;The node server now stores its tasks metadata in a Mongo DB when running as multi-tenant.  As a result, requests querying long-running tasks can now be handled by different server instances that have access to the shared Mongo DB.&lt;/p&gt;
&lt;h3&gt;Automatic Syntax Checking&lt;/h3&gt;
&lt;p&gt;Previously, syntax checking took place when a file is saved – if you have autosave turned on in Orion, this is not a problem, as problem markers would be updated as you made changes. If however, you had autosave turned off, any problem markers would quickly become stale causing confusion. Now, in Orion 14, syntax checking will take place on a regular interval even if autosave is turned off, to try and avoid stale problem markers piling up.&lt;/p&gt;
&lt;h3&gt;New File Client API&lt;/h3&gt;
&lt;p&gt;The Orion file client has been updated with the ability to find a project given a particular resource path. The new API can be invoked as:&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;strong&gt;fileClient.getProject(resourcePath, options)&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Information Annotations&lt;/h3&gt;
&lt;p&gt;A new type of annotation has been added to Orion – the &lt;strong&gt;info&lt;/strong&gt; annotation.&lt;/p&gt;
&lt;div class=&quot;wp-caption alignnone&quot; id=&quot;attachment_881&quot; style=&quot;width: 494px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/Screen-Shot-2017-03-20-at-2.50.40-PM.png&quot;&gt;&lt;img alt=&quot;The info annotation&quot; class=&quot; wp-image-881&quot; height=&quot;88&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/Screen-Shot-2017-03-20-at-2.50.40-PM.png&quot; width=&quot;484&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;The “info” annotation&lt;/p&gt;&lt;/div&gt;
&lt;h3&gt;Annotation Visibility&lt;/h3&gt;
&lt;p&gt;Always wanted to only show annotations in certain parts of the IDE? Well, now you can.&lt;/p&gt;
&lt;p&gt;Simply navigate to the editor settings preference page, and look for the &lt;strong&gt;Annotations&lt;/strong&gt;, &lt;strong&gt;Overview Annotations&lt;/strong&gt; and &lt;strong&gt;Text Annotations&lt;/strong&gt; sections to configure annotation visibility as you’d like.&lt;/p&gt;
&lt;div class=&quot;wp-caption alignnone&quot; id=&quot;attachment_882&quot; style=&quot;width: 506px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/Screen-Shot-2017-03-20-at-2.57.43-PM.png&quot;&gt;&lt;img alt=&quot;Annotation visibilities&quot; class=&quot; wp-image-882&quot; height=&quot;373&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/Screen-Shot-2017-03-20-at-2.57.43-PM-1024x770.png&quot; width=&quot;496&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Annotation visibilities&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;Don’t forget, you can also use the handy star buttons to have the preference(s) show up in the quick preference menu.&lt;/p&gt;
&lt;h3&gt;IDE Themes&lt;/h3&gt;
&lt;p&gt;Finally, after all this time, we have the ability to change the theme of not just the editor, but the entire IDE from the preferences!&lt;/p&gt;
&lt;p&gt;Not happy with the default theme in Orion? Head over to the &lt;strong&gt;IDE Theme&lt;/strong&gt; preferences page to change to another theme (currently there are only two of them) or create your own (by modifying an existing theme and saving it as your own).&lt;/p&gt;
&lt;div class=&quot;wp-caption alignnone&quot; id=&quot;attachment_883&quot; style=&quot;width: 499px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/theme-settings.png&quot;&gt;&lt;img alt=&quot;IDE Theme preferences&quot; class=&quot; wp-image-883&quot; height=&quot;361&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/theme-settings-1024x756.png&quot; width=&quot;489&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;IDE Theme preferences&lt;/p&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 21 Mar 2017 19:46:58 +0000</pubDate>
</item>
<item>
	<title>Roxanne Joncas: Open IoT Challenge 3.0 — Winners</title>
	<guid isPermaLink="false">https://medium.com/p/88fe75db263c</guid>
	<link>https://medium.com/@roxanne.iot/open-iot-challenge-3-0-winners-88fe75db263c?source=rss-82f8afd3e513------2</link>
	<description>&lt;p&gt;In case you missed the Eclipse IoT announcement last week, the &lt;a href=&quot;http://iot.eclipse.org/open-iot-challenge/&quot;&gt;Open IoT Challenge 3.0 winners&lt;/a&gt; were announced!&lt;/p&gt;&lt;h3&gt;And the winners are…&lt;/h3&gt;&lt;figure&gt;&lt;a href=&quot;http://iot.eclipse.org/open-iot-challenge/&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/750/1*GrTXE-OQ_fL4HYDOEjhD-w.png&quot; /&gt;&lt;/a&gt;Open IoT Challenge 3.0 Winners&lt;/figure&gt;&lt;p&gt;Congratulations to the &lt;a href=&quot;https://medium.com/inmoodforlife/in-the-mood-for-life-open-iot-challenge-final-report-a0c19482118c#.fgxnwhxqc&quot;&gt;InMoodForLife&lt;/a&gt; team for coming in first. Their solution analyzes and monitors the sleep patterns of individuals affected by bipolar disorder. The goal of the solution is to improve the therapeutic approach, react, and adapt the treatment faster. The team already shared part of their future plans with us and it sounds very promising! We hope they will go on to help many individuals suffering from bipolar disorder.&lt;/p&gt;&lt;p&gt;The krishi IoT and RHDS teams also worked very hard and delivered great solutions. &lt;a href=&quot;https://www.eclipse.org/org/press-release/openiotchallenge3_winners.php&quot;&gt;Read the full announcement&lt;/a&gt; to find out more.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/720/1*V7gJkIKmcuE7zepATG943A.png&quot; /&gt;Open IoT Challenge 3.0 Sponsors&lt;/figure&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=88fe75db263c&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 20 Mar 2017 10:07:55 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Scala is here</title>
	<guid isPermaLink="true">http://vertx.io/blog/scala-is-here</guid>
	<link>http://vertx.io/blog/scala-is-here</link>
	<description>&lt;article&gt;&lt;h2 id=&quot;tl-dr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Scala support for Vert.x is here!&lt;/li&gt;
&lt;li&gt;It is based on Scala 2.12, no support for 2.11 planned&lt;/li&gt;
&lt;li&gt;all Vert.x-modules are available in a Scala flavor&lt;/li&gt;
&lt;li&gt;It’s awesome&lt;/li&gt;
&lt;li&gt;Get started &lt;a href=&quot;https://github.com/vert-x3/vertx-sbt-starter&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;The rise of &lt;a href=&quot;http://scala-lang.org/&quot;&gt;Scala&lt;/a&gt; as one of the most important languages on the JVM caught many (me included) by surprise. This hybrid of functional and imperative paradigms struck a chord with many developers. Thanks to Scala a lot of people who’d never have touched a language like Haskell got exposed to functional programming. This exposure was one of the driving forces to get streams and lambda into the JVM.&lt;/p&gt;
&lt;p&gt;With the release of Vert.x 3.4.0 we finally introduced Scala to the family of supported languages: &lt;a href=&quot;https://github.com/vert-x3/vertx-lang-scala&quot;&gt;vertx-lang-scala&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post I will introduce the new stack and how the power of Scala can be used in your favorite reactive toolkit.&lt;/p&gt;
&lt;h2 id=&quot;basics&quot;&gt;Basics&lt;/h2&gt;
&lt;p&gt;vertx-lang-scala is based on Scala 2.12. There are no plans to support 2.11.&lt;/p&gt;
&lt;p&gt;All modules available for Vert.x are supported (you can check  &lt;a href=&quot;https://github.com/vert-x3/vertx-lang-scala/tree/master/vertx-lang-scala-stack&quot;&gt;here&lt;/a&gt; ).&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block note&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-comment&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;title&quot;&gt;Future and Promise both need a ExecutionContext &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;content&quot;&gt; Modules use the following naming-scheme: &lt;em&gt;io.vertx:-scala_2.12:&lt;/em&gt;. The Scala version of &lt;em&gt;io.vertx:vert-web:3.4.0&lt;/em&gt; would be &lt;em&gt;io.vertx:vertx-web-scala_2.12:3.4.0&lt;/em&gt;.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;There is an sbt-based &lt;a href=&quot;https://github.com/vert-x3/vertx-sbt-starter&quot;&gt;quickstart-project&lt;/a&gt; available that will be updated for each Vert.x-release.&lt;/p&gt;
&lt;p&gt;Please note: Although &lt;a href=&quot;http://www.scala-sbt.org/&quot;&gt;sbt&lt;/a&gt; is used in this quickstart it is by no means required. There are no special plugins involved so vertx-lang-scala can easily be used with &lt;a href=&quot;https://docs.gradle.org/current/userguide/scala_plugin.html&quot;&gt;Gradle&lt;/a&gt; or &lt;a href=&quot;https://github.com/davidB/scala-maven-plugin&quot;&gt;Maven&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I use sbt as it is the default build system used for Scala projects.&lt;/p&gt;
&lt;h2 id=&quot;quickstart&quot;&gt;Quickstart&lt;/h2&gt;
&lt;p&gt;Let’s get started by cloning the quickstart:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;git clone git@github.com:vert-x3/vertx-sbt-starter.git&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You just got the following things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An sbt project containing dependencies to Vert.x-core and Vert.x-web&lt;/li&gt;
&lt;li&gt;The ability to create a fat-jat via &lt;code&gt;sbt assembly&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The ability to create a docker container via &lt;code&gt;sbt docker&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A few example verticles&lt;/li&gt;
&lt;li&gt;Unit test examples&lt;/li&gt;
&lt;li&gt;a pre-configured Scala-shell inside sbt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will now run the application to get some quick satisfaction. Use &lt;code&gt;sbt assembly&lt;/code&gt; to produce the fat-jar followed by &lt;code&gt;java -jar target/scala-2.12/vertx-scala-sbt-assembly-0.1-SNAPSHOT.jar&lt;/code&gt;. Now point your browser to &lt;a href=&quot;http://localhost:8666/hello&quot;&gt;http://localhost:8666/hello&lt;/a&gt; for a classic welcome message.&lt;/p&gt;
&lt;h2 id=&quot;the-details&quot;&gt;The details&lt;/h2&gt;
&lt;p&gt;Open your IDE so we can take a look at what’s going on under the hood. We start with the &lt;em&gt;HttpVerticle&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; io.vertx.scala.sbt

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.lang.scala.&lt;span class=&quot;hljs-type&quot;&gt;ScalaVerticle&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.scala.ext.web.&lt;span class=&quot;hljs-type&quot;&gt;Router&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; scala.concurrent.&lt;span class=&quot;hljs-type&quot;&gt;Future&lt;/span&gt;

&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HttpVerticle&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ScalaVerticle&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;1&amp;gt;&lt;/span&gt;


  &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;startFuture&lt;/span&gt;(&lt;/span&gt;): &lt;span class=&quot;hljs-type&quot;&gt;Future&lt;/span&gt;[&lt;span class=&quot;hljs-type&quot;&gt;Unit&lt;/span&gt;] = { &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;2&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;router&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Router&lt;/span&gt;.router(vertx) &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;3&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;route&lt;/span&gt; =&lt;/span&gt; router
      .get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/hello&quot;&lt;/span&gt;)
        .handler(_.response().end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;world&quot;&lt;/span&gt;))

    vertx &lt;span class=&quot;hljs-comment&quot;&gt;//&amp;lt;4&amp;gt;&lt;/span&gt;
      .createHttpServer()
      .requestHandler(router.accept)
      .listenFuture(&lt;span class=&quot;hljs-number&quot;&gt;8666&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;5&amp;gt;&lt;/span&gt;
        .map(_ =&amp;gt; ()) &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;6&amp;gt;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;ScalaVerticle&lt;/em&gt; is the base class for all Scala-Verticles. It provides all required methods to integrate with the Vert.x-runtime.&lt;/li&gt;
&lt;li&gt;There are two ways to start a Verticle. Overriding &lt;em&gt;startFuture&lt;/em&gt;, like in this example, tells Vert.x to only consider the Verticle fully started after the returned &lt;em&gt;Future[Unit]&lt;/em&gt; has been successfully completed. Alternatively one can override &lt;em&gt;start&lt;/em&gt; and by that signal to Vert.x the instant availability of the Verticle.&lt;/li&gt;
&lt;li&gt;This block creates a &lt;em&gt;Router&lt;/em&gt; for incoming HTTP-requests. It registers a handler to answer with “world” if a request to the URL “/hello” arrives. The class is coming from the &lt;a href=&quot;http://vertx.io/docs/vertx-web/scala/&quot;&gt;Vert.x-web-module&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Every Verticle has access to the Vert.x-instance. Here we use it to create a webserver and register our router to handle incoming requests.&lt;/li&gt;
&lt;li&gt;We finally reached the reason why I use &lt;em&gt;startFuture&lt;/em&gt; in the first place. All operations in Vert.x are asynchronous. So starting the webserver most definitely means it takes some more time until it bound to the given port (8666 in this case). That’s why &lt;em&gt;listenFuture&lt;/em&gt; is used, which returns a &lt;em&gt;Future&lt;/em&gt; which in turn contains the actual instance of the webserver that just got started. So our Verticle will be ready to receive requests &lt;em&gt;after&lt;/em&gt; the returned &lt;em&gt;Future&lt;/em&gt; has been completed.&lt;/li&gt;
&lt;li&gt;In most cases we can return the &lt;em&gt;Future&lt;/em&gt; directly. In this case the &lt;em&gt;Future&lt;/em&gt; returned by &lt;em&gt;listenFuture&lt;/em&gt; has the wrong type. We get a &lt;em&gt;Future[HttpServer]&lt;/em&gt; but we need a &lt;em&gt;Future[Unit]&lt;/em&gt; as you can see in the signature of &lt;em&gt;startFuture&lt;/em&gt;. This call takes care of mapping the given &lt;em&gt;Future[HttpServer]&lt;/em&gt; to the required return type.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;I use &lt;a href=&quot;http://www.scalatest.org/&quot;&gt;ScalaTest&lt;/a&gt; for all my testing needs. It comes with stellar support for asynchronous operations and is a perfect fit for testing Vert.x-applications.&lt;/p&gt;
&lt;p&gt;The following &lt;em&gt;HttpVerticleSpec&lt;/em&gt; shows how to test an HTTP-API using only Vert.x-classes. Personally I prefer &lt;a href=&quot;http://rest-assured.io/&quot;&gt;REST-assured&lt;/a&gt; with its rich DSL. For this post I wanted to stick with Vert.x-API, so here we go.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs scala&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; io.vertx.scala.sbt

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.scalatest.&lt;span class=&quot;hljs-type&quot;&gt;Matchers&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; scala.concurrent.&lt;span class=&quot;hljs-type&quot;&gt;Promise&lt;/span&gt;

&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HttpVerticleSpec&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;VerticleTesting&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-type&quot;&gt;HttpVerticle&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Matchers&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;1&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;hljs-string&quot;&gt;&quot;HttpVerticle&quot;&lt;/span&gt; should &lt;span class=&quot;hljs-string&quot;&gt;&quot;bind to 8666 and answer with 'world'&quot;&lt;/span&gt; in { &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;2&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;promise&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Promise&lt;/span&gt;[&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;3&amp;gt;&lt;/span&gt;

    vertx.createHttpClient()  &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;4&amp;gt;&lt;/span&gt;
      .getNow(&lt;span class=&quot;hljs-number&quot;&gt;8666&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/hello&quot;&lt;/span&gt;,
        r =&amp;gt; {
          r.exceptionHandler(promise.failure)
          r.bodyHandler(b =&amp;gt; promise.success(b.toString))
        })

    promise.future.map(res =&amp;gt; res should equal(&lt;span class=&quot;hljs-string&quot;&gt;&quot;world&quot;&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;5&amp;gt;&lt;/span&gt;
  }

}&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;VerticleTesting&lt;/em&gt; is a base class for your tests included with the quickstart-project. It’s a small helper that takes care of deploying/un-deploying the Verticle to be tested and manages a Vert.x-instance. It additionally extends &lt;a href=&quot;http://www.scalatest.org/user_guide/async_testing&quot;&gt;AsyncFlatSpec&lt;/a&gt; so we can use Futures as test-return-types.&lt;/li&gt;
&lt;li&gt;Isn’t it nice and readable?&lt;/li&gt;
&lt;li&gt;The promise is required as the whole test will run async&lt;/li&gt;
&lt;li&gt;We use the vertx-instance provided by &lt;em&gt;VerticleTesting&lt;/em&gt; to create a Netty-based HttpClient. We instruct the client to call the specified URL and to succeed the &lt;em&gt;Promise&lt;/em&gt; with the returned body.&lt;/li&gt;
&lt;li&gt;This creates the actual assertion. After getting the &lt;em&gt;Future&lt;/em&gt; from the &lt;em&gt;Promise&lt;/em&gt; an assertion is created: &lt;em&gt;The Result should be equal to the String “world”&lt;/em&gt;. ScalaTest takes care of evaluating the returned &lt;em&gt;Future&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That’s all you need to get started!&lt;/p&gt;
&lt;h2 id=&quot;futures-in-vertx-lang-scala&quot;&gt;Futures in vertx-lang-scala&lt;/h2&gt;
&lt;p&gt;Now for a more in depth topic I think is worth mentioning. vertx-lang-scala treats async operations the Scala-way which is a little different from what you might be used from Vert.x. For async operations like subscribing to the eventbus or deploying a Verticle you would call a method like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs scala&quot;&gt;vertx.deployVerticle(&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.foo.OtherVerticle&quot;&lt;/span&gt;, res -&amp;gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (res.succeeded()) {
    startFuture.complete();
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    startFuture.fail(res.cause());
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;em&gt;deployVerticle&lt;/em&gt; method takes the Verticle-name and a &lt;em&gt;Handler[AsyncResult]&lt;/em&gt; as its arguments. The &lt;em&gt;Handler[AsyncResult]&lt;/em&gt; is called after Vert.x tried deploying the Verticle. This style can also be used for Scala (which might ease the transition when coming from the Java-world) but their is a way more &lt;em&gt;scalaish&lt;/em&gt; way of doing this.&lt;/p&gt;
&lt;p&gt;For every method taking a &lt;em&gt;Handler[AsyncResult]&lt;/em&gt; as its argument I create an alternative method using &lt;a href=&quot;http://docs.scala-lang.org/overviews/core/futures.html&quot;&gt;Scala-Futures&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs scala&quot;&gt;vertx.deployVerticleFuture(&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.foo.OtherVerticle&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;1&amp;gt;&lt;/span&gt;
  .onComplete{  &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;2&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Success&lt;/span&gt;(s) =&amp;gt; println(s&lt;span class=&quot;hljs-string&quot;&gt;&quot;Verticle id is: $s&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;3&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Failure&lt;/span&gt;(t) =&amp;gt; t.printStackTrace()
  }&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;A method providing a &lt;em&gt;Future&lt;/em&gt; based alternative gets &lt;em&gt;Future&lt;/em&gt; appended to its name and returns a &lt;em&gt;Future&lt;/em&gt; instead of taking a &lt;em&gt;Handler&lt;/em&gt; as its argument.&lt;/li&gt;
&lt;li&gt;We are now free to use &lt;em&gt;Future&lt;/em&gt; the way we want. In this case onComplete is used to react on the completion.&lt;/li&gt;
&lt;li&gt;Pattern matching on the result &lt;em&gt;&amp;lt;3&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I strongly recommend using this approach over using &lt;em&gt;Handlers&lt;/em&gt; as you won’t run into Callback-hell and you get all the goodies Scala provides for async operations.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block note&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-comment&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;title&quot;&gt;Future and Promise both need a ExecutionContext &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;content&quot;&gt; The &lt;a href=&quot;https://github.com/vert-x3/vertx-lang-scala/blob/master/vertx-lang-scala/src/main/scala/io/vertx/lang/scala/VertxExecutionContext.scala&quot;&gt;VertxExecutionContext&lt;/a&gt; is made implicitly available inside the &lt;a href=&quot;https://github.com/vert-x3/vertx-lang-scala/blob/master/vertx-lang-scala/src/main/scala/io/vertx/lang/scala/ScalaVerticle.scala&quot;&gt;ScalaVerticle&lt;/a&gt;. It makes sure all  operations are executed on the correct Event Loop. If you are using Vert.x without Verticles you have to provide it on your own.
&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;using-the-console&quot;&gt;Using the console&lt;/h2&gt;
&lt;p&gt;A great feature of sbt is the embedded, configurable Scala-console. The console available in the quickstart-project is pre-configured to provide a fresh Vert.x-instance and all required imports so you can start playing around with Vert.x in an instant.&lt;/p&gt;
&lt;p&gt;Execute the following commands in the project-folder to deploy the &lt;em&gt;HttpVerticle&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;sbt
&amp;gt; console
scala&amp;gt; vertx.deployVerticle(nameForVerticle[HttpVerticle])
scala&amp;gt; vertx.deploymentIDs&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After  executing this sequence you can now point your browser &lt;a href=&quot;http://localhost:8666/hello&quot;&gt;http://localhost:8666/hello&lt;/a&gt; to see our message. The last command issued shows the Ids under which Verticles have been deployed.&lt;/p&gt;
&lt;p&gt;To get rid of the deployment you can now type &lt;code&gt;vertx.undeploy(vertx.deploymentIDs.head)&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;that-s-it-&quot;&gt;That’s it!&lt;/h2&gt;
&lt;p&gt;This was a very quick introduction to our new Scala-stack. I hope to have given you a little taste of the Scala goodness now available with Vert.x. I recommend digging a little more through the quickstart to get a feeling for what’s there.
In my next blog post I will explain some of the decisions I made and the obstacles I faced with the differences between Java and Scala /Hint: They are way bigger than I was aware of).&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
</item>

</channel>
</rss>
